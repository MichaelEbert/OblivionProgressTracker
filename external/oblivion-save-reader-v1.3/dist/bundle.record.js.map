{"version":3,"file":"bundle.record.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAwB,eAAID,IAE5BD,EAAqB,eAAIC,IAR3B,CASGK,MAAM,WACT,M,yDCVO,MAAMC,EACTC,YACWC,EACCC,GADD,KAAAD,OAAAA,EACC,KAAAC,WAAAA,EAGRC,aACA,OAAOC,KAAKF,WAGhBG,QAAQC,GACJF,KAAKF,YAAcI,EAGvBC,QACI,OAAO,IAAIR,EAAWK,KAAKH,OAAQG,KAAKD,QAG5CK,SAASC,GACLA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAG1B,MAAMC,EAAU,IAAIC,YAAYR,KAAKH,OAAOY,MAAMT,KAAKD,OAAQC,KAAKF,YAAc,KAC5EY,EAAQH,EAAQ,GAChBI,EAASJ,EAAQ,GACjBK,EAAOL,EAAQ,GACfM,EAAQN,EAAQ,GAChBO,EAAUP,EAAQ,GAClBQ,EAAUR,EAAQ,GAClBS,EAAgBT,EAAQ,GAE9B,OAAO,IAAIU,KAAKP,EAAOC,EAAQC,EAAMC,EAAOC,EAASC,EAASC,GAGlEE,QAAQb,GAKJ,OAJAA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAGX,IAAIa,YAAYnB,KAAKH,OAAOY,MAAMT,KAAKD,OAAQC,KAAKF,YAAc,IACnE,GAGlBsB,UAAUf,GAKN,OAJAA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAGT,IAAIE,YAAYR,KAAKH,OAAOY,MAAMT,KAAKD,OAAQC,KAAKF,YAAc,IACnE,GAGpBuB,UAAUhB,GAKN,OAJAA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAGT,IAAIE,YAAYR,KAAKH,OAAOY,MAAMT,KAAKD,OAAQC,KAAKF,WAAa,IAClE,GAGpBwB,SAASjB,GAKL,OAJAA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAGV,IAAIiB,WAAWvB,KAAKH,OAAOY,MAAMT,KAAKD,OAAQC,KAAKF,YAAc,IAClE,GAGnB0B,SAASnB,GAKL,OAJAA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAGV,IAAIiB,WAAWvB,KAAKH,OAAOY,MAAMT,KAAKD,OAAQC,KAAKF,WAAa,IACjE,GAGnB2B,UAAUpB,GAKN,OAJAA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAGT,IAAIoB,aAAa1B,KAAKH,OAAOY,MAAMT,KAAKD,OAAQC,KAAKF,YAAc,IACpE,GAGpB6B,WAAWtB,GAKP,OAJAA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAGR,IAAIsB,aAAa5B,KAAKH,OAAOY,MAAMT,KAAKD,OAAQC,KAAKF,YAAc,IACpE,GAGrB+B,aAAaxB,GAKT,OAJAA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YACdN,KAAK8B,YAAYzB,GAGlBI,MAAM,GAAI,GAGzBqB,YAAYzB,GACRA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAG1B,MAAMyB,EAAS/B,KAAKsB,SAASjB,GAM7B,OAFYL,KAAKgC,WAAWD,EAAQ1B,GAKxC2B,WAAWC,EAAa5B,GAIpB,OAHAA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAGnB4B,OAAOC,gBAAgB,IAAIZ,WAAWvB,KAAKH,OAAOY,MAAMT,KAAKD,OAAQC,KAAKF,YAAcmC,KAGnGG,cAAcH,EAAa5B,GAIvB,OAHAA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAGnB,IAAI,IAAIiB,WAAWvB,KAAKH,OAAOY,MAAMT,KAAKD,OAAQC,KAAKF,YAAcmC,KAGhFI,eAAeJ,EAAa5B,GAIxB,OAHAA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAGnB,IAAI,IAAIE,YAAYR,KAAKH,OAAOY,MAAMT,KAAKD,OAAQC,KAAKF,YAAqB,EAANmC,KAGlFK,aAAaL,EAAa5B,GAItB,OAHAA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAGnB,IAAI,IAAIa,YAAYnB,KAAKH,OAAOY,MAAMT,KAAKD,OAAQC,KAAKF,YAAqB,EAANmC,KAGlFM,eAAeN,EAAa5B,GAIxB,OAHAA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAGnB,IAAI,IAAIoB,aAAa1B,KAAKH,OAAOY,MAAMT,KAAKD,OAAQC,KAAKF,YAAqB,EAANmC,KAGnFO,gBAAgBP,EAAa5B,GAIzB,OAHAA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAGnB,IAAI,IAAIsB,aAAa5B,KAAKH,OAAOY,MAAMT,KAAKD,OAAQC,KAAKF,YAAqB,EAANmC,KAGnFQ,iBAAiBR,EAAa5B,GAC1BA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAC1B,IAAIoC,EAAgB,GACpB,IAAK,IAAIC,EAAI,EAAGA,EAAIV,IAAOU,EACvBD,EAAIE,KAAK5C,KAAK8B,YAAYzB,IAE9B,OAAOqC,EAGXG,kBAAkBZ,EAAa5B,GAC3BA,MAAAA,IAAAA,EAAcL,KAAKH,OAAOS,YAC1B,IAAIoC,EAAgB,GACpB,IAAK,IAAIC,EAAI,EAAGA,EAAIV,IAAOU,EACvBD,EAAIE,KAAK5C,KAAK6B,aAAaxB,IAE/B,OAAOqC,MCvKXI,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAa3D,QAGrB,IAAIC,EAASuD,EAAyBE,GAAY,CAGjD1D,QAAS,IAOV,OAHA6D,EAAoBH,GAAUzD,EAAQA,EAAOD,QAASyD,GAG/CxD,EAAOD,QCpBfyD,EAAoBK,EAAI,CAAC9D,EAAS+D,KACjC,IAAI,IAAIC,KAAOD,EACXN,EAAoBQ,EAAEF,EAAYC,KAASP,EAAoBQ,EAAEjE,EAASgE,IAC5EE,OAAOC,eAAenE,EAASgE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EP,EAAoBQ,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFd,EAAoBkB,EAAK3E,IACH,oBAAX4E,QAA0BA,OAAOC,aAC1CX,OAAOC,eAAenE,EAAS4E,OAAOC,YAAa,CAAEC,MAAO,WAE7DZ,OAAOC,eAAenE,EAAS,aAAc,CAAE8E,OAAO,K,oECFhD,MAAMC,EAGTzE,YAAY0E,EAAgBC,GACxBvE,KAAKwE,SAA2C,YAAhB,UAAfF,EAAOG,OACpBF,EAAI1E,OAAOS,WAAeiE,EAAIxE,QCLnC,MAAM2E,EAIT9E,YAAY0E,EAAgBC,GACL,EAAfD,EAAOG,QACPzE,KAAKyE,MAAQF,EAAIrD,WAEF,EAAfoD,EAAOG,QACPzE,KAAKoE,MAAQG,EAAIrD,WAEF,EAAfoD,EAAOG,QACPzE,KAAK2E,QAAUJ,EAAIjD,YAEnBiD,EAAI1E,OAAOS,WAAeiE,EAAIxE,QCdnC,MAAM6E,EAmBThF,YAAY0E,EAAgBC,G,QAhB5B,KAAAM,UAAsB,GAItB,KAAAC,YAAwB,GAGxB,KAAAC,KAAmB,GAOnB,KAAAC,aAAyB,GAGrB,IAAIC,EAAcV,EAAIxE,OAgBtB,GAfAC,KAAKkF,YAAuC,IAAT,EAAfZ,EAAOG,OAC3BzE,KAAKmF,SAAoC,IAAT,EAAfb,EAAOG,OAEL,SAAfH,EAAOG,QACPzE,KAAK6E,UAAYN,EAAInC,cAAc,IAGpB,UAAfkC,EAAOG,QACPzE,KAAKoF,KAAOb,EAAIrD,WAGD,EAAfoD,EAAOG,QACPzE,KAAKyE,MAAQF,EAAIjD,YAGF,UAAfgD,EAAOG,MAAoB,CAI3B,IAAItE,EACJ,IAAK,IAAIkF,EAAW,EAAGA,GAAY,IAAKA,EAAU,CAW9C,GAVAlF,EAAQoE,EAAIpE,QACPmE,EAAOgB,SAAWnF,EAAMJ,QAAW,IAAMsF,EAAW,IACrDrF,KAAK8E,YAAc3E,EAAMiC,cAAc,KAEtCkC,EAAOgB,SAAWnF,EAAMJ,QAAW,GAAKsF,EAAW,IACpDrF,KAAKuF,QAAUpF,EAAMiB,aAEpBkD,EAAOgB,SAAWnF,EAAMJ,QAAW,GAAKsF,EAAW,IACpDrF,KAAKwF,UAAYrF,EAAMiB,aAEtBkD,EAAOgB,SAAWnF,EAAMJ,QAAY,KAAiB,QAAZ,EAAAC,KAAKuF,eAAO,QAAE,GAAG,IAAOF,EAAW,EAC7E,IAAK,IAAI1C,EAAI,EAAGA,GAAiB,QAAZ,EAAA3C,KAAKuF,eAAO,QAAI,GAAK,IACtCvF,KAAK+E,KAAKnC,KAAKzC,EAAMiC,cAAc,OAC/BjC,EAAMJ,OAASkF,EAAcX,EAAOgB,aAFG3C,GAkBnD,GAbmB,GAAf2B,EAAOG,OAAiBH,EAAOgB,SAAWnF,EAAMJ,QAAW,GAAMuE,EAAOgB,SAAWnF,EAAMJ,QAAW,EAAII,EAAMqB,aAC9GxB,KAAKyF,SAAWtF,EAAM2B,eAGP,GAAfwC,EAAOG,OAAiBH,EAAOgB,SAAWnF,EAAMJ,QAAW,IAC3DC,KAAK0F,MAAQvF,EAAMe,WAGJ,SAAfoD,EAAOG,OAAsBH,EAAOgB,SAAWnF,EAAMJ,QAAW,GAAMuE,EAAOgB,SAAWnF,EAAMJ,QAAW,EAAyB,EAApBI,EAAMkB,cACpHrB,KAAK2F,gBAAkBxF,EAAMiB,YAC7BpB,KAAKgF,aAAe7E,EAAMkC,eAAerC,KAAK2F,kBAG7CxF,EAAMJ,OAASkF,IAAiBX,EAAOgB,SAaxC,aATOtF,KAAKuF,eACLvF,KAAKwF,iBACLxF,KAAKyF,gBACLzF,KAAK0F,aACL1F,KAAK2F,gBACZ3F,KAAK8E,YAAc,GACnB9E,KAAK+E,KAAO,GACZ/E,KAAKgF,aAAe,GAKxB7E,GACAoE,EAAItE,QAAQE,EAAMJ,OAASwE,EAAIxE,aAWnC,GARmB,GAAfuE,EAAOG,QACPzE,KAAKyF,SAAWlB,EAAIzC,eAGL,GAAfwC,EAAOG,QACPzE,KAAK0F,MAAQnB,EAAIrD,WAGF,SAAfoD,EAAOG,MAAmB,CAC1BzE,KAAK2F,gBAAkBpB,EAAInD,YAC3B,IAAK,IAAIuB,EAAI,EAAGA,EAAI3C,KAAK2F,kBAAmBhD,EACxC3C,KAAKgF,aAAapC,KAAK2B,EAAInD,aAInCmD,EAAI1E,OAAOS,WAAeiE,EAAIxE,QC1GnC,MAAM6F,EAiEThG,YAAY0E,EAAgBC,GA0BxB,GAtEJ,KAAAsB,SAGM,GAGN,KAAAC,SAAqB,GAErB,KAAAC,OAAmB,GAKnB,KAAAC,UAGM,GA6BiB,EAAf1B,EAAOG,QACPzE,KAAKyE,MAAQF,EAAIrD,WAGF,EAAfoD,EAAOG,QACPzE,KAAKiG,SAAW1B,EAAIjD,WACpBtB,KAAKkG,aAAe3B,EAAIjD,WACxBtB,KAAKmG,UAAY5B,EAAIjD,WACrBtB,KAAKoG,QAAU7B,EAAIjD,WACnBtB,KAAKqG,MAAQ9B,EAAIjD,WACjBtB,KAAKsG,UAAY/B,EAAIjD,WACrBtB,KAAKuG,YAAchC,EAAIjD,WACvBtB,KAAKwG,KAAOjC,EAAIjD,YAGD,GAAfgD,EAAOG,QACPzE,KAAKwF,UAAYjB,EAAIrD,UACrBlB,KAAKyG,YAAclC,EAAInD,YACvBpB,KAAK0G,YAAcnC,EAAInD,YACvBpB,KAAK2G,WAAapC,EAAInD,YACtBpB,KAAK4G,MAAQrC,EAAInD,YACjBpB,KAAK6G,QAAUtC,EAAInD,YACnBpB,KAAK8G,QAAUvC,EAAInD,aAGJ,GAAfkD,EAAOG,MAAc,CACrBzE,KAAK+G,YAAcxC,EAAInD,YACvB,IAAK,IAAIuB,EAAI,EAAGA,EAAI3C,KAAK+G,cAAepE,EAAG,CACvC,IAAIqE,EAAUzC,EAAIrD,UACd+F,EAAc1C,EAAIjD,WACtBtB,KAAK6F,SAASjD,KAAK,CACfoE,QAASA,EACTC,YAAaA,KAKzB,GAAmB,GAAf3C,EAAOG,MAAc,CACrBzE,KAAKkH,WAAa3C,EAAInD,YACtB,IAAK,IAAIuB,EAAI,EAAGA,EAAI3C,KAAKkH,aAAcvE,EACnC3C,KAAK8F,SAASlD,KAAK2B,EAAIrD,WAe/B,GAXmB,IAAfoD,EAAOG,QACPzE,KAAK+F,OAAOnD,KAAK2B,EAAIjD,YACrBtB,KAAK+F,OAAOnD,KAAK2B,EAAIjD,YACrBtB,KAAK+F,OAAOnD,KAAK2B,EAAIjD,YACrBtB,KAAK+F,OAAOnD,KAAK2B,EAAIjD,aAGN,EAAfgD,EAAOG,QACPzE,KAAKmH,WAAa5C,EAAIrD,WAGP,UAAfoD,EAAOG,MAAoB,CAC3BzE,KAAKoH,SAAW7C,EAAInD,YACpB,IAAK,IAAIuB,EAAI,EAAGA,EAAI3C,KAAKoH,WAAYzE,EAAG,CACpC,IAAI0E,EAAQ9C,EAAIjD,WACZgG,EAAM/C,EAAI9C,YACdzB,KAAKgG,UAAUpD,KAAK,CAChB2E,WAAYF,EACZG,SAAUF,KAKH,IAAfhD,EAAOG,QACPzE,KAAKyF,SAAWlB,EAAIzC,eAGL,IAAfwC,EAAOG,QACPzE,KAAKyH,QAAUlD,EAAIjD,WACnBtB,KAAK0H,UAAYnD,EAAIjD,WACrBtB,KAAK2H,MAAQpD,EAAIjD,WACjBtB,KAAK4H,MAAQrD,EAAIjD,WACjBtB,KAAK6H,MAAQtD,EAAIjD,WACjBtB,KAAK8H,WAAavD,EAAIjD,WACtBtB,KAAK+H,WAAaxD,EAAIjD,WACtBtB,KAAKgI,QAAUzD,EAAIjD,WACnBtB,KAAKiI,WAAa1D,EAAIjD,WACtBtB,KAAKkI,YAAc3D,EAAIjD,WACvBtB,KAAKmI,YAAc5D,EAAIjD,WACvBtB,KAAKoI,SAAW7D,EAAIjD,WACpBtB,KAAKqI,UAAY9D,EAAIjD,WACrBtB,KAAKsI,YAAc/D,EAAIjD,WACvBtB,KAAKuI,WAAahE,EAAIjD,WACtBtB,KAAKwI,WAAajE,EAAIjD,WACtBtB,KAAKyI,SAAWlE,EAAIjD,WACpBtB,KAAK0I,WAAanE,EAAIjD,WACtBtB,KAAK2I,SAAWpE,EAAIjD,WACpBtB,KAAK4I,MAAQrE,EAAIjD,WACjBtB,KAAK6I,YAActE,EAAIjD,YAGR,KAAfgD,EAAOG,QACPzE,KAAK8I,YAAcvE,EAAIrD,WAEvBqD,EAAI1E,OAAOS,WAAeiE,EAAIxE,QCuG1C,QAvPe,CAACwE,EAAiBlE,KAC7B,IAAI0I,EAAgBxE,EAAInD,YACpB4H,EAAyB,GAC7B,GAAIzE,EAAIxE,OAASM,EAAyF,MAAO,CAAC0I,cAAAA,EAAeC,WAAAA,GACjI,IAAK,IAAIC,EAAI,EAAGA,EAAIF,IAAiBE,EAAG,CACpC,IAEI7E,EAFA8E,EAAO3E,EAAIjD,WACf,GAAIiD,EAAIxE,OAASM,EAAyF,MAAO,CAAC0I,cAAAA,EAAeC,WAAAA,GAGjI,OAAOE,GACH,KAAK,GA6DL,KAAK,GAeL,KAAK,GAGL,KAAK,GAGL,KAAK,GA+DL,KAAK,GAmBL,KAAK,GA4BL,KAAK,GAGL,KAAK,GACD9E,EAAQG,EAAIrD,UACZ,MAlMJ,KAAK,GACDkD,EAAQ,GACRA,EAAM+E,UAAY5E,EAAIrD,UACtBkD,EAAMgF,OAAS7E,EAAInD,YACnBgD,EAAMiF,UAAY,GAClB,IAAK,IAAIC,EAAI,EAAGA,EAAIlF,EAAMgF,SAAUE,EAAG,CACnC,IAAIC,EAAY,GAUhB,GATAA,EAAKC,SAAWjF,EAAInD,YACpBmI,EAAKE,QAAUlF,EAAInD,YACE,QAAjBmI,EAAKE,UACLF,EAAKG,OAASnF,EAAIrD,WAED,IAAjBqI,EAAKE,UACLF,EAAKG,OAASnF,EAAI5C,cAEtByC,EAAMiF,UAAUzG,KAAK2G,GACjBhF,EAAIxE,OAASM,EAAyF,MAAO,CAAC0I,cAAAA,EAAeC,WAAAA,GAErI5E,EAAMuF,QAAUpF,EAAIjD,WACpB,MACJ,KAAK,GAGL,KAAK,GA+CL,KAAK,GAwFL,KAAK,GA4BL,KAAK,GACD8C,EAAQ,EACR,MAlKJ,KAAK,GACDA,EAAQ,GACRA,EAAMwF,KAAOrF,EAAIrD,UACjBkD,EAAMyF,EAAItF,EAAI9C,YACd2C,EAAM0F,EAAIvF,EAAI9C,YACd2C,EAAM2F,EAAIxF,EAAI9C,YACd2C,EAAMK,MAAQF,EAAIrD,UAClB,MACJ,KAAK,GACDkD,EAAQ,GACRA,EAAM4F,QAAUzF,EAAIrD,UACpBkD,EAAMK,MAAQF,EAAIrD,UAClBkD,EAAM6F,SAAW1F,EAAIrD,UACrBkD,EAAMuF,QAAUpF,EAAInD,YACpB,MACJ,KAAK,GACDgD,EAAQ,GACRA,EAAM8F,OAAS3F,EAAIrD,UACnBkD,EAAMW,KAAOR,EAAInC,cAAc,IAC/B,MACJ,KAAK,GACDgC,EAAQ,GACRA,EAAMmB,QAAUhB,EAAInD,YACpBgD,EAAMW,KAAO,GACb,IAAK,IAAIuE,EAAI,EAAGA,EAAIlF,EAAMmB,UAAW+D,EAAG,CACpC,IAAIvE,EAAY,GAIhB,GAHAA,EAAKoF,KAAO5F,EAAIrD,UAChB6D,EAAK4E,QAAUpF,EAAIjD,WACnB8C,EAAMW,KAAKnC,KAAKmC,GACZR,EAAIxE,OAASM,EAAyF,MAAO,CAAC0I,cAAAA,EAAeC,WAAAA,GAErI,MAIJ,KAAK,GACD5E,EAAQ,GACRA,EAAMmB,QAAUhB,EAAInD,YACpBgD,EAAMW,KAAO,GACb,IAAK,IAAIuE,EAAI,EAAGA,EAAIlF,EAAMmB,UAAW+D,EAEjC,GADAlF,EAAMW,KAAKnC,KAAK2B,EAAIrD,WAChBqD,EAAIxE,OAASM,EAAyF,MAAO,CAAC0I,cAAAA,EAAeC,WAAAA,GAErI,MAaJ,KAAK,GACD5E,EAAQG,EAAInD,YACZ,MACJ,KAAK,GAML,KAAK,GAGL,KAAK,GAgCL,KAAK,GAmBL,KAAK,GAUL,KAAK,GA8DL,KAAK,GACDgD,EAAQG,EAAI9C,YACZ,MAnIJ,KAAK,GASL,KAAK,GAmBL,KAAK,GA+EL,KAAK,GAmBL,KAAK,GACD2C,EAAQG,EAAIjD,WACZ,MApHJ,KAAK,GACD8C,EAAQ,GACRA,EAAMgG,UAAY7F,EAAIjD,WACtB8C,EAAMd,IAAMiB,EAAIrD,UAChBkD,EAAM8E,KAAO3E,EAAIjD,WACjB,MACJ,KAAK,GACD8C,EAAQ,GACRA,EAAMyF,EAAItF,EAAI9C,YACd2C,EAAM0F,EAAIvF,EAAI9C,YACd2C,EAAM2F,EAAIxF,EAAI9C,YACd2C,EAAMiG,GAAK9F,EAAI9C,YACf2C,EAAMkG,GAAK/F,EAAI9C,YACf2C,EAAMmG,GAAKhG,EAAI9C,YACf2C,EAAMoG,SAAWjG,EAAIrD,UACrB,MAIJ,KAAK,GAGD,MACJ,KAAK,GACDkD,EAAQG,EAAInC,cAAc,GAC1B,MAIJ,KAAK,GACDgC,EAAQG,EAAInC,cAAc,IAC1B,MACJ,KAAK,GACDgC,EAAQ,GACRA,EAAM+F,KAAO5F,EAAIrD,UACjBkD,EAAMmB,QAAUhB,EAAInD,YACpBgD,EAAMW,KAAO,GACb,IAAK,IAAIpC,EAAI,EAAGA,EAAIyB,EAAMmB,UAAW5C,EAEjC,GADAyB,EAAMW,KAAKnC,KAAK2B,EAAInC,cAAc,KAC9BmC,EAAIxE,OAASM,EAAyF,MAAO,CAAC0I,cAAAA,EAAeC,WAAAA,GAErI,MAOJ,KAAK,GACD5E,EAAQ,GACRA,EAAMqG,KAAOlG,EAAIrD,UACjBkD,EAAMyF,EAAItF,EAAI9C,YACd2C,EAAM0F,EAAIvF,EAAI9C,YACd2C,EAAM2F,EAAIxF,EAAI9C,YACd,MAUJ,KAAK,GACD2C,EAAQG,EAAIzC,cACZ,MACJ,KAAK,GACDsC,EAAQ,GACRA,EAAMuF,QAAUpF,EAAIrD,UACpBkD,EAAMmB,QAAUhB,EAAInD,YACpBgD,EAAMW,KAAOR,EAAInC,cAAcgC,EAAMmB,SAErC,MACJ,KAAK,GACDnB,EAAQ,GACRA,EAAMmB,QAAUhB,EAAInD,YACpBgD,EAAMW,KAAO,GACb,IAAK,IAAIpC,EAAI,EAAGA,EAAIyB,EAAMmB,UAAW5C,EAEjC,GADAyB,EAAMW,KAAKnC,KAAK2B,EAAInC,cAAc,KAC9BmC,EAAIxE,OAASM,EAAyF,MAAO,CAAC0I,cAAAA,EAAeC,WAAAA,GAErI,MACJ,KAAK,GACD5E,EAAQG,EAAInC,cAAc,GAC1B,MAaJ,KAAK,GACDgC,EAAQ,GACRA,EAAMsG,UAAYnG,EAAIzC,cACtBsC,EAAMuF,QAAUpF,EAAIjD,WACpB8C,EAAMuG,QAAUpG,EAAIjD,WACpB8C,EAAMwG,KAAO,GACb,IAAK,IAAItB,EAAI,EAAGA,EAAIlF,EAAMuG,UAAWrB,EAAG,CACpC,IAAIsB,EAAY,GAMhB,GALAA,EAAKvD,MAAQ9C,EAAIjD,WACjBsJ,EAAKC,UAAYtG,EAAIrD,UACrB0J,EAAKE,WAAavG,EAAIrD,UACtB0J,EAAKG,SAAWxG,EAAIrD,UACpBkD,EAAMwG,KAAKhI,KAAKgI,GACZrG,EAAIxE,OAASM,EAAyF,MAAO,CAAC0I,cAAAA,EAAeC,WAAAA,IAc7I,GAJAA,EAAWpG,KAAK,CACZsG,KAAMA,EACN9E,MAAOA,IAEPG,EAAIxE,OAASM,EAAyF,MAAO,CAAC0I,cAAAA,EAAeC,WAAAA,GAGrI,MAAO,CACHD,cAAAA,EACAC,WAAAA,I,IC9PIgC,E,SCPZ,MAAMC,EAwKFrL,YAAY2E,EAAiB2G,GAqCzB,GApCAlL,KAAKmL,WAAa,CACdC,cAAe7G,EAAIrD,QAAQgK,GAC3BG,SAAU9G,EAAIrD,QAAQgK,GACtBI,cAAe/G,EAAIrD,QAAQgK,GAC3BK,gBAAiBhH,EAAIrD,QAAQgK,GAC7BM,cAAejH,EAAIrD,QAAQgK,GAC3BO,eAAgBlH,EAAIrD,QAAQgK,GAC5BQ,WAAYnH,EAAIrD,QAAQgK,GACxBS,YAAapH,EAAIrD,QAAQgK,GACzBU,cAAerH,EAAIrD,QAAQgK,GAC3BW,gBAAiBtH,EAAIrD,QAAQgK,GAC7BY,aAAcvH,EAAIrD,QAAQgK,GAC1Ba,oBAAqBxH,EAAIrD,QAAQgK,GACjCc,YAAazH,EAAIrD,QAAQgK,GACzBe,YAAa1H,EAAIrD,QAAQgK,GACzBgB,YAAa3H,EAAIrD,QAAQgK,GACzBiB,UAAW5H,EAAIrD,QAAQgK,GACvBkB,kBAAmB7H,EAAIrD,QAAQgK,GAC/BmB,eAAgB9H,EAAIrD,QAAQgK,GAC5BoB,WAAY/H,EAAIrD,QAAQgK,GACxBqB,YAAahI,EAAIrD,QAAQgK,GACzB/F,SAAUZ,EAAIrD,QAAQgK,GACtBsB,SAAUjI,EAAIrD,QAAQgK,GACtBuB,SAAUlI,EAAIrD,QAAQgK,GACtBwB,UAAWnI,EAAIrD,QAAQgK,GACvByB,QAASpI,EAAIrD,QAAQgK,GACrB0B,cAAerI,EAAIrD,QAAQgK,GAC3B2B,SAAUtI,EAAIrD,QAAQgK,GACtB4B,cAAevI,EAAIrD,QAAQgK,GAC3B6B,SAAUxI,EAAIrD,QAAQgK,GACtB8B,QAASzI,EAAIrD,QAAQgK,GACrB+B,OAAQ1I,EAAIrD,QAAQgK,GACpBgC,aAAc3I,EAAIrD,QAAQgK,GAC1BiC,SAAU5I,EAAIrD,QAAQgK,GACtBkC,SAAU7I,EAAIrD,QAAQgK,MAEtB3G,EAAIxE,OAASmL,GAAjB,CACAlL,KAAKqL,SAAW9G,EAAIjD,SAAS4J,GAC7BlL,KAAKmF,SAAWZ,EAAInC,cAAc,IAClCpC,KAAKwM,SAAWjI,EAAInC,cAAc,IAClCpC,KAAKqN,YAAc9I,EAAIrD,QAAQgK,GAC/BlL,KAAKsN,aAAe,GACpB,IAAK,IAAI3K,EAAI,EAAGA,EAAI,KAAMA,EACtB3C,KAAKsN,aAAa1K,KAAK2B,EAAIrD,QAAQgK,IAEvC,KAAI3G,EAAIxE,OAASmL,GAAjB,CACAlL,KAAKuN,KAAOhJ,EAAInD,UAAU8J,GAC1BlL,KAAKyM,SAAWlI,EAAInC,cAAc,GAClCpC,KAAK+M,SAAW,GAChB,IAAK,IAAIpK,EAAI,EAAGA,EAAI3C,KAAKuN,OAAQ5K,EAC7B3C,KAAK+M,SAASnK,KAAK2B,EAAInC,cAAc,IAEzC,KAAImC,EAAIxE,OAASmL,GAAjB,CACAlL,KAAKmN,SAAW5I,EAAInC,cAAc,GAClCpC,KAAKwN,cAAgBjJ,EAAInD,UAAU8J,GACnClL,KAAKyN,WAAa,GAClB,IAAK,IAAI9K,EAAI,EAAGA,EAAI3C,KAAKwN,gBAAiB7K,EACtC3C,KAAKyN,WAAW7K,KAAK,CACjB6H,KAAMlG,EAAIrD,QAAQgK,GAClBhC,KAAM3E,EAAIjD,SAAS4J,KAG3B,KAAI3G,EAAIxE,OAASmL,GAAjB,CACAlL,KAAKoN,SAAW7I,EAAInC,cAAc,GAClCpC,KAAK0N,iBAAmBnJ,EAAInD,UAAU8J,GACtClL,KAAK2N,cAAgB,GACrB,IAAK,IAAIhL,EAAI,EAAGA,EAAI3C,KAAK0N,mBAAoB/K,EAAG,CAC5C,IAAIiL,EAAOrJ,EAAInD,UAAU8J,GACzBlL,KAAK2N,cAAc/K,KAAK,CACpBgL,KAAMA,EACNC,UAAWtJ,EAAIrD,QAAQgK,GACvB7D,MAAO9C,EAAIjD,SAAS4J,GACpB4C,cAAevJ,EAAInC,cAAcwL,KAGzC,KAAIrJ,EAAIxE,OAASmL,IACjBlL,KAAK+N,UAAY,CACbtG,QAASlD,EAAI9C,UAAUyJ,GACvBxD,UAAWnD,EAAI9C,UAAUyJ,GACzBvD,MAAOpD,EAAI9C,UAAUyJ,GACrBtD,MAAOrD,EAAI9C,UAAUyJ,GACrBrD,MAAOtD,EAAI9C,UAAUyJ,GACrBpD,WAAYvD,EAAI9C,UAAUyJ,GAC1BnD,WAAYxD,EAAI9C,UAAUyJ,GAC1BlD,QAASzD,EAAI9C,UAAUyJ,GACvBjD,WAAY1D,EAAI9C,UAAUyJ,GAC1BhD,YAAa3D,EAAI9C,UAAUyJ,GAC3B/C,YAAa5D,EAAI9C,UAAUyJ,GAC3B9C,SAAU7D,EAAI9C,UAAUyJ,GACxB7C,UAAW9D,EAAI9C,UAAUyJ,GACzB5C,YAAa/D,EAAI9C,UAAUyJ,GAC3B3C,WAAYhE,EAAI9C,UAAUyJ,GAC1B1C,WAAYjE,EAAI9C,UAAUyJ,GAC1BzC,SAAUlE,EAAI9C,UAAUyJ,GACxBxC,WAAYnE,EAAI9C,UAAUyJ,GAC1BvC,SAAUpE,EAAI9C,UAAUyJ,GACxBtC,MAAOrE,EAAI9C,UAAUyJ,GACrBrC,YAAatE,EAAI9C,UAAUyJ,IAE3B3G,EAAIxE,OAASmL,IAAjB,CACAlL,KAAKgO,YAAczJ,EAAIrD,QAAQgK,GAC/BlL,KAAKiO,gBAAkB,GACvB,IAAK,IAAItL,EAAI,EAAGA,EAAI3C,KAAKgO,cAAerL,EAWpC,GAVA3C,KAAKiO,gBAAgBrL,KAAK,CACtBqD,SAAU1B,EAAIjD,SAAS4J,GACvBhF,aAAc3B,EAAIjD,SAAS4J,GAC3B/E,UAAW5B,EAAIjD,SAAS4J,GACxB9E,QAAS7B,EAAIjD,SAAS4J,GACtB7E,MAAO9B,EAAIjD,SAAS4J,GACpB5E,UAAW/B,EAAIjD,SAAS4J,GACxB3E,YAAahC,EAAIjD,SAAS4J,GAC1B1E,KAAMjC,EAAIjD,SAAS4J,KAEnB3G,EAAIxE,OAASmL,EAAW,OAOhC,GALAlL,KAAKkO,WAAa,CACdC,OAAQ5J,EAAIjD,SAAS4J,GACrBkD,MAAO7J,EAAIjD,SAAS4J,GACpBmD,QAAS9J,EAAIjD,SAAS4J,MAEtB3G,EAAIxE,OAASmL,IACjBlL,KAAKsO,WAAa,CACd7G,QAASlD,EAAIrD,QAAQgK,GACrBxD,UAAWnD,EAAIrD,QAAQgK,GACvBvD,MAAOpD,EAAIrD,QAAQgK,GACnBtD,MAAOrD,EAAIrD,QAAQgK,GACnBrD,MAAOtD,EAAIrD,QAAQgK,GACnBpD,WAAYvD,EAAIrD,QAAQgK,GACxBnD,WAAYxD,EAAIrD,QAAQgK,GACxBlD,QAASzD,EAAIrD,QAAQgK,GACrBjD,WAAY1D,EAAIrD,QAAQgK,GACxBhD,YAAa3D,EAAIrD,QAAQgK,GACzB/C,YAAa5D,EAAIrD,QAAQgK,GACzB9C,SAAU7D,EAAIrD,QAAQgK,GACtB7C,UAAW9D,EAAIrD,QAAQgK,GACvB5C,YAAa/D,EAAIrD,QAAQgK,GACzB3C,WAAYhE,EAAIrD,QAAQgK,GACxB1C,WAAYjE,EAAIrD,QAAQgK,GACxBzC,SAAUlE,EAAIrD,QAAQgK,GACtBxC,WAAYnE,EAAIrD,QAAQgK,GACxBvC,SAAUpE,EAAIrD,QAAQgK,GACtBtC,MAAOrE,EAAIrD,QAAQgK,GACnBrC,YAAatE,EAAIrD,QAAQgK,IAEzB3G,EAAIxE,OAASmL,IAAjB,CACAlL,KAAKuO,cAAgBhK,EAAIrD,QAAQgK,GACjClL,KAAKwO,SAAWjK,EAAIjD,SAAS4J,GAC7BlL,KAAKyO,YAAclK,EAAIrD,QAAQgK,GAC/BlL,KAAK0O,eAAiBnK,EAAInD,UAAU8J,GACpClL,KAAK2O,YAAc,GACnB,IAAK,IAAIhM,EAAI,EAAGA,EAAI3C,KAAK0O,iBAAkB/L,EACvC3C,KAAK2O,YAAY/L,KAAK2B,EAAIrD,QAAQgK,IAEtC,KAAI3G,EAAIxE,OAASmL,GAAjB,CACAlL,KAAK4O,cAAgBrK,EAAInD,UAAU8J,GACnClL,KAAK6O,WAAa,GAClB,IAAK,IAAIlM,EAAI,EAAGA,EAAI3C,KAAK4O,gBAAiBjM,EACtC3C,KAAK6O,WAAWjM,KAAK,CACjBkM,MAAOvK,EAAIrD,QAAQgK,GACnB6D,WAAYxK,EAAIjD,SAAS4J,GACzB8D,SAAUzK,EAAIjD,SAAS4J,KAG/B,KAAI3G,EAAIxE,OAASmL,GAAjB,CACAlL,KAAKiP,aAAe1K,EAAIrD,QAAQgK,GAChClL,KAAKkP,WAAa,GAClB,IAAK,IAAIvM,EAAI,EAAGA,EAAI3C,KAAKiP,eAAgBtM,EAErC,GADA3C,KAAKkP,WAAWtM,KAAK,CAACuM,KAAM5K,EAAIvC,WAAW,KACvCuC,EAAIxE,OAASmL,EAAW,OAGhClL,KAAKoP,SAAW7K,EAAInC,cAAc,KAClCpC,KAAKqP,UAAY9K,EAAInC,cAAc,KACnCpC,KAAKsP,SAAW/K,EAAInC,cAAc,KAClCpC,KAAKuP,KAAOhL,EAAIrD,QAAQgK,GACxBlL,KAAKwP,KAAOjL,EAAIrD,QAAQgK,GACxBlL,KAAKyP,KAAOlL,EAAIrD,QAAQgK,GACxBlL,KAAK0P,WAAanL,EAAI9C,UAAUyJ,GAChClL,KAAK2P,UAAYpL,EAAInC,cAAc,GACnCpC,KAAK4P,SAAWrL,EAAIjD,SAAS4J,GAC7BlL,KAAK6P,OAAStL,EAAIjD,SAAS4J,GAC3BlL,KAAK8P,OAASvL,EAAI1C,aAAaqJ,GAC/BlL,KAAK+P,QAAUxL,EAAIrD,QAAQgK,GAEvBA,EAAY3G,EAAIxE,SAChBC,KAAKgQ,8BAAgCzL,EAAIrD,QAAQgK,GACjDlL,KAAKiQ,8BAAgC1L,EAAIrD,QAAQgK,GACjDlL,KAAKkQ,2BAA6B3L,EAAIrD,QAAQgK,GAC9ClL,KAAKmQ,wBAA0B5L,EAAIrD,QAAQgK,GAC3ClL,KAAKoQ,wBAA0B7L,EAAIrD,QAAQgK,GAC3ClL,KAAKqQ,wBAA0B9L,EAAIrD,QAAQgK,GAC3ClL,KAAKsQ,wBAA0B/L,EAAIrD,QAAQgK,GAC3ClL,KAAKuQ,wBAA0BhM,EAAIrD,QAAQgK,GAC3ClL,KAAKwQ,wBAA0BjM,EAAIrD,QAAQgK,GAC3ClL,KAAKyQ,wBAA0BlM,EAAIrD,QAAQgK,GAC3ClL,KAAK0Q,kBAAoBnM,EAAIrD,QAAQgK,GACrClL,KAAK2Q,qBAAuBpM,EAAIrD,QAAQgK,GACxClL,KAAK4Q,yBAA2BrM,EAAIjD,SAAS4J,GAC7ClL,KAAK6Q,6BAA+BtM,EAAIjD,SAAS4J,GACjDlL,KAAK8Q,mBAAqBvM,EAAInC,cAAc,EAAG8I,GAC/ClL,KAAK+Q,iBAAmBxM,EAAIzC,YAAYoJ,GACxClL,KAAKgR,iBAAmBzM,EAAIzC,YAAYoJ,IAG5ClL,KAAKiR,UAAY1M,EAAIrD,QAAQgK,YAI9B,MAAMgG,EA2DTtR,YAAY0E,EAAgBC,GAExB,GA3BJ,KAAA4M,mCAA+C,GAC/C,KAAAC,oCAAgD,GAChD,KAAAC,mCAA+C,GAS/C,KAAAC,gBAAmC,GAEnC,KAAAC,gBAA4B,GAI5B,KAAAvI,WAIM,IAMG1E,EAAOS,KAAM,OAClB,MAAME,EAAcV,EAAIxE,OAClBmL,EAAYjG,EAAcX,EAAOgB,SACvC,IAEI,GAAsB,KAAlBhB,EAAO4F,OAAiB,CACxB,IAAIsH,EACJ,IAAK,IAAI7O,EAAI2B,EAAOgB,SAAW,EAAG3C,GAAK,IAAKA,EACxC,GACuB,KAAnB2B,EAAOS,KAAKpC,IAAoC,MAArB2B,EAAOS,KAAKpC,EAAE,IAChB,KAAtB2B,EAAOS,KAAKpC,EAAE,KAAsC,MAAtB2B,EAAOS,KAAKpC,EAAE,IACjD,CACE6O,EAAejN,EAAIxE,OAAS4C,EAAI,GAChC,WAGaO,IAAjBsO,IAGAxR,KAAKyR,OAAS,IAAIxG,EAAa,IAAI,IAAW1G,EAAI1E,OAAQ2R,GAAevM,EAAcX,EAAOgB,WAoBtG,GAjBmB,WAAfhB,EAAOG,QACPzE,KAAK0R,iBAAmBnN,EAAIrD,QAAQgK,GACpClL,KAAK2R,cAAgBpN,EAAI9C,UAAUyJ,GACnClL,KAAK4R,cAAgBrN,EAAI9C,UAAUyJ,GACnClL,KAAK6R,cAAgBtN,EAAI9C,UAAUyJ,IAEpB,EAAf5G,EAAOG,QACPzE,KAAK8R,cAAgBvN,EAAIrD,QAAQgK,GACjClL,KAAK+R,iBAAmBxN,EAAIrD,QAAQgK,GACpClL,KAAKgS,aAAezN,EAAIrD,QAAQgK,GAChClL,KAAKiS,UAAY1N,EAAI9C,UAAUyJ,GAC/BlL,KAAKkS,UAAY3N,EAAI9C,UAAUyJ,GAC/BlL,KAAKmS,UAAY5N,EAAI9C,UAAUyJ,GAC/BlL,KAAKoS,WAAa7N,EAAI9C,UAAUyJ,GAChClL,KAAKqS,WAAa9N,EAAI9C,UAAUyJ,GAChClL,KAAKsS,WAAa/N,EAAI9C,UAAUyJ,IAEjB,EAAf5G,EAAOG,MAAa,CAEpB,GADAzE,KAAKuS,WAAahO,EAAIrD,QAAQgK,GACN,IAApBlL,KAAKuS,YAAoBjO,EAAOgB,UAAY,EAE5C,YADAtF,KAAKwS,UAAYjO,EAAIjD,SAAS4J,IAGlClL,KAAKyS,QAAUlO,EAAI9C,UAAUyJ,GAC7BlL,KAAK0S,QAAUnO,EAAI9C,UAAUyJ,GAC7BlL,KAAK2S,QAAUpO,EAAI9C,UAAUyJ,GAC7BlL,KAAK4S,SAAWrO,EAAI9C,UAAUyJ,GAC9BlL,KAAK6S,SAAWtO,EAAI9C,UAAUyJ,GAC9BlL,KAAK8S,SAAWvO,EAAI9C,UAAUyJ,GAclC,GAZmB,EAAf5G,EAAOG,SAAgC,EAAfH,EAAOG,OAA8B,EAAfH,EAAOG,SACrDzE,KAAK+S,gBAAkBxO,EAAIrD,QAAQgK,GACnClL,KAAKgT,aAAezO,EAAI9C,UAAUyJ,GAClClL,KAAKiT,aAAe1O,EAAI9C,UAAUyJ,GAClClL,KAAKkT,aAAe3O,EAAI9C,UAAUyJ,GAClClL,KAAKmT,cAAgB5O,EAAI9C,UAAUyJ,GACnClL,KAAKoT,cAAgB7O,EAAI9C,UAAUyJ,GACnClL,KAAKqT,cAAgB9O,EAAI9C,UAAUyJ,IAEpB,QAAf5G,EAAOG,SAAqC,EAAfH,EAAOG,OAA8B,EAAfH,EAAOG,OAA8B,EAAfH,EAAOG,SAChFzE,KAAKsT,aAAe/O,EAAIrD,QAAQgK,IAEd,KAAlB5G,EAAO4F,OAAiB,CACxB,IAAK,IAAIvH,EAAI,EAAGA,EAAI,KAAMA,EACtB3C,KAAKmR,mCAAmCvO,KAAK2B,EAAI9C,UAAUyJ,IAE/D,IAAK,IAAIvI,EAAI,EAAGA,EAAI,KAAMA,EACtB3C,KAAKoR,oCAAoCxO,KAAK2B,EAAI9C,UAAUyJ,IAEhE,IAAK,IAAIvI,EAAI,EAAGA,EAAI,KAAMA,EACtB3C,KAAKqR,mCAAmCzO,KAAK2B,EAAI9C,UAAUyJ,IAE/DlL,KAAKuT,iCAAmChP,EAAI9C,UAAUyJ,GACtDlL,KAAKwT,kCAAoCjP,EAAI9C,UAAUyJ,GACvDlL,KAAKyT,kCAAoClP,EAAI9C,UAAUyJ,GAM3D,GAJAlL,KAAKwS,UAAYjO,EAAIjD,SAAS4J,GACX,EAAf5G,EAAOG,QACPzE,KAAKyE,MAAQF,EAAIrD,QAAQgK,IAEV,UAAf5G,EAAOG,MAAmB,CAC1BzE,KAAK0T,kBAAoBnP,EAAInD,UAAU8J,GACvC,IAAK,IAAIvI,EAAI,EAAGA,EAAI3C,KAAK0T,oBAAqB/Q,EAAG,CAC7C,IAAIwH,EAAO5F,EAAIrD,QAAQgK,GACnByI,EAAkBpP,EAAIrD,QAAQgK,GAC9B0I,EAAoBrP,EAAIrD,QAAQgK,GAChC2I,EAAuC,GAC3C,IAAK,IAAIC,EAAI,EAAGA,EAAIF,IAAqBE,EACrCD,EAAejR,KAAK,EAAS2B,EAAKU,EAAcX,EAAOgB,WAE3DtF,KAAKsR,gBAAgB1O,KAAK,CACtBuH,KAAMA,EACNwJ,gBAAiBA,EACjBC,kBAAmBA,EACnBC,eAAgBA,KAI5B,IAAIE,EAAI,EAASxP,EAAKU,EAAcX,EAAOgB,UAC3CtF,KAAK+I,cAAgBgL,EAAEhL,cACvB/I,KAAKgJ,WAAa+K,EAAE/K,WACD,EAAf1E,EAAOG,SAAgC,EAAfH,EAAOG,OAA8B,EAAfH,EAAOG,SACrDzE,KAAKgU,mBAAqBzP,EAAInD,UAAU8J,GACxClL,KAAKuR,gBAAkBhN,EAAInC,cAAcpC,KAAKgU,qBAE/B,GAAf1P,EAAOG,QACPzE,KAAKiU,MAAQ1P,EAAI9C,UAAUyJ,IAE/BlL,KAAKkU,QAA0C,aAAhB,WAAf5P,EAAOG,OACzB,MAAO0P,GACLC,QAAQC,IAAIF,GAEZ5P,EAAI1E,OAAOS,WAAeiE,EAAIxE,QC1iBnC,MAAMuU,EAGT1U,YAAY0E,EAAgBC,GACxBvE,KAAKuU,cAAgD,YAAhB,UAAfjQ,EAAOG,OACzBF,EAAI1E,OAAOS,WAAeiE,EAAIxE,QCAnC,MAAMyU,EAIT5U,YAAY0E,EAAgBC,GACxB,GAHJ,KAAAkQ,UAAwB,GAGD,EAAfnQ,EAAOG,MAAa,CACpBzE,KAAK0U,aAAenQ,EAAInD,YACxB,IAAK,IAAIuB,EAAI,EAAGA,EAAI3C,KAAK0U,eAAgB/R,EAAG,CACxC,IAAIgS,EAAKpQ,EAAIrD,UACT0T,EAAKrQ,EAAIrD,UACblB,KAAKyU,UAAU7R,KAAK,CAChByI,SAAUsJ,EACVxP,SAAUyP,KAIH,EAAftQ,EAAOG,QACPzE,KAAKyE,MAAQF,EAAIjD,YAEjBiD,EAAI1E,OAAOS,WAAeiE,EAAIxE,QCxBnC,MAAM8U,EAGTjV,YAAY0E,EAAgBC,GACL,EAAfD,EAAOG,QACPzE,KAAKyE,MAAQF,EAAIrD,WAEF,EAAfoD,EAAOG,QACPzE,KAAKoE,MAAQG,EAAIrD,WAEjBqD,EAAI1E,OAAOS,WAAeiE,EAAIxE,QCRnC,MAAM+U,EA8CTlV,YAAY0E,EAAgBC,GAR5B,KAAA+M,gBAAmC,GAEnC,KAAAC,gBAA4B,GAI5B,KAAAvI,WAAyB,GAGrB,MACMkC,EADc3G,EAAIxE,OACQuE,EAAOgB,SACvC,IACI,MAAML,EAAcV,EAAIxE,OAkBxB,GAjBmB,WAAfuE,EAAOG,QACPzE,KAAK0R,iBAAmBnN,EAAIrD,QAAQgK,GACpClL,KAAK2R,cAAgBpN,EAAI9C,UAAUyJ,GACnClL,KAAK4R,cAAgBrN,EAAI9C,UAAUyJ,GACnClL,KAAK6R,cAAgBtN,EAAI9C,UAAUyJ,IAEpB,EAAf5G,EAAOG,QACPzE,KAAK8R,cAAgBvN,EAAIrD,QAAQgK,GACjClL,KAAK+R,iBAAmBxN,EAAIrD,QAAQgK,GACpClL,KAAKgS,aAAezN,EAAIrD,QAAQgK,GAChClL,KAAKiS,UAAY1N,EAAI9C,UAAUyJ,GAC/BlL,KAAKkS,UAAY3N,EAAI9C,UAAUyJ,GAC/BlL,KAAKmS,UAAY5N,EAAI9C,UAAUyJ,GAC/BlL,KAAKoS,WAAa7N,EAAI9C,UAAUyJ,GAChClL,KAAKqS,WAAa9N,EAAI9C,UAAUyJ,GAChClL,KAAKsS,WAAa/N,EAAI9C,UAAUyJ,IAEjB,EAAf5G,EAAOG,MAAa,CAEpB,GADAzE,KAAKuS,WAAahO,EAAIrD,QAAQgK,GACN,IAApBlL,KAAKuS,YAAoBjO,EAAOgB,UAAY,EAE5C,YADAtF,KAAKwS,UAAYjO,EAAIjD,SAAS4J,IAGlClL,KAAKyS,QAAUlO,EAAI9C,UAAUyJ,GAC7BlL,KAAK0S,QAAUnO,EAAI9C,UAAUyJ,GAC7BlL,KAAK2S,QAAUpO,EAAI9C,UAAUyJ,GAC7BlL,KAAK4S,SAAWrO,EAAI9C,UAAUyJ,GAC9BlL,KAAK6S,SAAWtO,EAAI9C,UAAUyJ,GAC9BlL,KAAK8S,SAAWvO,EAAI9C,UAAUyJ,GAiBlC,GAfmB,EAAf5G,EAAOG,SAAgC,EAAfH,EAAOG,OAA8B,EAAfH,EAAOG,SACrDzE,KAAK+S,gBAAkBxO,EAAIrD,QAAQgK,GACnClL,KAAKgT,aAAezO,EAAI9C,UAAUyJ,GAClClL,KAAKiT,aAAe1O,EAAI9C,UAAUyJ,GAClClL,KAAKkT,aAAe3O,EAAI9C,UAAUyJ,GAClClL,KAAKmT,cAAgB5O,EAAI9C,UAAUyJ,GACnClL,KAAKoT,cAAgB7O,EAAI9C,UAAUyJ,GACnClL,KAAKqT,cAAgB9O,EAAI9C,UAAUyJ,IAEpB,QAAf5G,EAAOG,SAAqC,EAAfH,EAAOG,OAA8B,EAAfH,EAAOG,OAA8B,EAAfH,EAAOG,SAChFzE,KAAKsT,aAAe/O,EAAIrD,QAAQgK,IAEjB,EAAf5G,EAAOG,QACPzE,KAAKyE,MAAQF,EAAIrD,QAAQgK,IAEV,UAAf5G,EAAOG,MAAmB,CAC1BzE,KAAK0T,kBAAoBnP,EAAInD,UAAU8J,GACvC,IAAK,IAAIvI,EAAI,EAAGA,EAAI3C,KAAK0T,oBAAqB/Q,EAAG,CAC7C,GAAI4B,EAAIxE,OAASkF,EAAcX,EAAOgB,SAA8D,OACpG,IAAI6E,EAAO5F,EAAIrD,QAAQgK,GACnByI,EAAkBpP,EAAIrD,QAAQgK,GAC9B0I,EAAoBrP,EAAIrD,QAAQgK,GAChC2I,EAAuC,GAC3C,IAAK,IAAIC,EAAI,EAAGA,EAAIF,IAAqBE,EAAG,CACxC,GAAIvP,EAAIxE,OAASkF,EAAcX,EAAOgB,SAA8D,OACpGuO,EAAejR,KAAK,EAAS2B,EAAKU,EAAcX,EAAOgB,WAE3DtF,KAAKsR,gBAAgB1O,KAAK,CACtBuH,KAAMA,EACNwJ,gBAAiBA,EACjBC,kBAAmBA,EACnBC,eAAgBA,KAI5B,GAAmB,UAAfvP,EAAOG,MAAoB,CAC3B,GAAIF,EAAIxE,OAASkF,EAAcX,EAAOgB,SAA8D,OACpG,IAAIyP,EAAQ,EAASxQ,EAAKU,EAAcX,EAAOgB,UAC/CtF,KAAK+I,cAAgBgM,EAAMhM,cAC3B/I,KAAKgJ,WAAa+L,EAAM/L,WAET,EAAf1E,EAAOG,SAAgC,EAAfH,EAAOG,OAA8B,EAAfH,EAAOG,SACrDzE,KAAKgU,mBAAqBzP,EAAInD,UAAU8J,GACxClL,KAAKuR,gBAAkBhN,EAAInC,cAAcpC,KAAKgU,mBAAoB9I,IAEnD,GAAf5G,EAAOG,QACPzE,KAAKiU,MAAQ1P,EAAI9C,UAAUyJ,IAE/BlL,KAAKkU,QAA0C,aAAhB,WAAf5P,EAAOG,OACzB,MAAO0P,GACLC,QAAQC,IAAIF,GAEZ5P,EAAI1E,OAAOS,WAAeiE,EAAIxE,QCvInC,MAAMiV,EAiBTpV,YAAY0E,EAAgBC,GAd5B,KAAA0Q,MAUM,GAGN,KAAAlQ,KAAmB,GAEf,MAAME,EAAcV,EAAIxE,OAIxB,GAHmB,EAAfuE,EAAOG,QACPzE,KAAKyE,MAAQF,EAAIjD,YAEF,UAAfgD,EAAOG,MAAoB,CAC3BzE,KAAKkV,SAAW3Q,EAAIjD,WACpB,IAAK,IAAIqB,EAAI,EAAGA,EAAI3C,KAAKkV,WAAYvS,EAAG,CACpC,IAAI0E,EAAQ9C,EAAIjD,WACZ4H,EAAO3E,EAAIjD,WACX6T,EAAW5Q,EAAIjD,WACf8T,EAKE,GACN,IAAK,IAAItB,EAAI,EAAGA,EAAIqB,IAAYrB,EAAG,CAC/B,IAAIuB,EAAY9Q,EAAIjD,WAEhBgU,EAAM/Q,EAAIpE,QACVoV,EAAOhR,EAAIpE,QAEXqV,EAAgBjR,EAAI9C,YAEpBgU,EAAcH,EAAIpU,UAClBwU,EAAoBH,EAAKnT,cAAc,GAE3CgT,EAAQxS,KAAK,CACTuS,SAAUE,EACVG,cAAeA,EACfC,YAAaA,EACbC,kBAAmBA,IAG3B1V,KAAKiV,MAAMrS,KAAK,CACZyE,MAAOA,EACP6B,KAAMA,EACNiM,SAAUA,EACVC,QAASA,KAIrB,GAAmB,UAAf9Q,EAAOG,MAAmB,CAC1BzE,KAAKuF,QAAUhB,EAAInD,YACnBpB,KAAK2V,YAAcpR,EAAIjD,WACvB,IAAK,IAAIqB,EAAI,EAAGA,EAAI3C,KAAKuF,UAAW5C,EAAG,CACnC,IAAI2G,EAAI,GAKR,GAJI3G,EAAI,IAAM3C,KAAKuF,UACf+D,EAAKrE,EAAcX,EAAOgB,SAAYf,EAAIxE,QAE9CC,KAAK+E,KAAKnC,KAAK2B,EAAInC,cAAckH,IAC7B/E,EAAIxE,OAAUkF,EAAcX,EAAOgB,SACnC,OAIRf,EAAI1E,OAAOS,WAAeiE,EAAIxE,SNjE1C,SAAYiL,GACR,yBACA,kDACA,sBACA,oBACA,4BACA,gCACA,sBACA,sCACA,wBACA,oBACA,kBACA,4BACA,0BACA,kBACA,wBACA,oBACA,8CACA,gDACA,8CACA,wBACA,sBACA,gBAtBJ,CAAYA,IAAAA,EAAU,KAyBP,MAAM4K,EAmEjBhW,YAAY2E,GAlEZ,KAAA2F,OAAS,EACT,KAAA2L,KAAO,EACP,KAAApR,MAAQ,EACR,KAAAqR,QAAU,EACV,KAAAxQ,SAAW,EA+DPtF,KAAKkK,OAAS3F,EAAIrD,UAClBlB,KAAK6V,KAAOtR,EAAIjD,WAChBtB,KAAKyE,MAAQF,EAAIrD,UACjBlB,KAAK8V,QAAUvR,EAAIjD,WACnBtB,KAAKsF,SAAWf,EAAInD,YACpBpB,KAAK+E,KAAOR,EAAInC,cAAcpC,KAAKsF,UA/DnCyQ,gBACA,IAAK/V,KAAK+E,KAAM,OAAO/E,KAAKgW,gBAE5B,MAAMC,EAAY,IAAIC,YAAYlW,KAAKsF,UACjC6Q,EAAU,IAAI5U,WAAW0U,GAC/B,IAAK,IAAItT,EAAI,EAAGA,EAAI3C,KAAKsF,WAAY3C,EAAGwT,EAAQxT,GAAK3C,KAAK+E,KAAKpC,GAE/D,MAAMxC,EAAQ,IAAI,IAAW8V,EAAW,GAExC,OAAOjW,KAAK6V,MACR,KAAK7K,EAAWoL,KACZpW,KAAKgW,gBAAkB,IAAItR,EAAW1E,KAAMG,GAC5C,MACJ,KAAK6K,EAAWqL,QACZrW,KAAKgW,gBAAkB,IAAIxB,EAAcxU,KAAMG,GAC/C,MACJ,KAAK6K,EAAWsL,oBAChB,KAAKtL,EAAWuL,MAChB,KAAKvL,EAAWwL,SAChB,KAAKxL,EAAWyL,WAChB,KAAKzL,EAAW0L,MAChB,KAAK1L,EAAW2L,cAChB,KAAK3L,EAAW4L,KAChB,KAAK5L,EAAW6L,QAChB,KAAK7L,EAAW8L,OAChB,KAAK9L,EAAW+L,OAChB,KAAK/L,EAAWgM,IACZhX,KAAKgW,gBAAkB,IAAInB,EAAc7U,KAAMG,GAC/C,MACJ,KAAK6K,EAAWiM,IAChB,KAAKjM,EAAWkM,SACZlX,KAAKgW,gBAAkB,IAAIpQ,EAAe5F,KAAMG,GAChD,MACJ,KAAK6K,EAAWmM,KACZnX,KAAKgW,gBAAkB,IAAIpR,EAAW5E,KAAMG,GAC5C,MACJ,KAAK6K,EAAWoM,kBACZpX,KAAKgW,gBAAkB,IAAIlB,EAAwB9U,KAAMG,GACzD,MACJ,KAAK6K,EAAWqM,mBAChB,KAAKrM,EAAWsM,kBACZtX,KAAKgW,gBAAkB,IAAI9E,EAAwBlR,KAAMG,GACzD,MACJ,KAAK6K,EAAWuM,OACZvX,KAAKgW,gBAAkB,IAAI1B,EAAatU,KAAMG,GAC9C,MACJ,KAAK6K,EAAWwM,MACZxX,KAAKgW,gBAAkB,IAAIhB,EAAYhV,KAAMG,GAC7C,MACJ,KAAK6K,EAAWyM,GACZzX,KAAKgW,gBAAkB,IAAI3R,EAASrE,KAAMG,GAIlD,OADIH,KAAKgW,wBAAwBhW,KAAK+E,KAC/B/E,KAAKgW,mB","sources":["webpack://oblivion-save-reader/webpack/universalModuleDefinition","webpack://oblivion-save-reader/./save/util.ts","webpack://oblivion-save-reader/webpack/bootstrap","webpack://oblivion-save-reader/webpack/runtime/define property getters","webpack://oblivion-save-reader/webpack/runtime/hasOwnProperty shorthand","webpack://oblivion-save-reader/webpack/runtime/make namespace object","webpack://oblivion-save-reader/./save/record_ai.ts","webpack://oblivion-save-reader/./save/record_book.ts","webpack://oblivion-save-reader/./save/record_cell.ts","webpack://oblivion-save-reader/./save/record_creature.ts","webpack://oblivion-save-reader/./save/properties.ts","webpack://oblivion-save-reader/./save/record.ts","webpack://oblivion-save-reader/./save/record_creaturereference.ts","webpack://oblivion-save-reader/./save/record_dialog.ts","webpack://oblivion-save-reader/./save/record_faction.ts","webpack://oblivion-save-reader/./save/record_generic.ts","webpack://oblivion-save-reader/./save/record_instancereference.ts","webpack://oblivion-save-reader/./save/record_quest.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"oblivionRecord\"] = factory();\n\telse\n\t\troot[\"oblivionRecord\"] = factory();\n})(self, function() {\nreturn ","export class SaveBuffer {\n    constructor(\n        public buffer: ArrayBuffer,\n        private realOffset: number,\n    ) { }\n\n    get offset() {\n        return this.realOffset;\n    }\n\n    advance(num: number) {\n        this.realOffset += num;\n    }\n\n    clone() {\n        return new SaveBuffer(this.buffer, this.offset);\n    }\n\n    readDate(endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        // if (!(this.offset + 16 <= endOffset)) debugger;\n        // console.assert(this.offset + 16 <= endOffset);\n        const wordBuf = new Uint16Array(this.buffer.slice(this.offset, this.realOffset += 16));\n        const wYear = wordBuf[0];\n        const wMonth = wordBuf[1];\n        const wDay = wordBuf[3];\n        const wHour = wordBuf[4];\n        const wMinute = wordBuf[5];\n        const wSecond = wordBuf[6];\n        const wMilliseconds = wordBuf[7];\n\n        return new Date(wYear, wMonth, wDay, wHour, wMinute, wSecond, wMilliseconds);\n    }\n\n    readInt(endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        // if (!(this.offset + 4 <= endOffset)) debugger;\n        // console.assert(this.offset + 4 <= endOffset);\n        const intBuf = new Uint32Array(this.buffer.slice(this.offset, this.realOffset += 4));\n        return intBuf[0];\n    }\n\n    readShort(endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        // if (!(this.offset + 2 <= endOffset)) debugger;\n        // console.assert(this.offset + 2 <= endOffset);\n        const shortBuf = new Uint16Array(this.buffer.slice(this.offset, this.realOffset += 2));\n        return shortBuf[0];\n    }\n\n    peekShort(endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        // if (!(this.offset + 2 <= endOffset)) debugger;\n        // console.assert(this.offset + 2 <= endOffset);\n        const shortBuf = new Uint16Array(this.buffer.slice(this.offset, this.realOffset + 2));\n        return shortBuf[0];\n    }\n\n    readByte(endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        // if (!(this.offset + 1 <= endOffset)) debugger;\n        // console.assert(this.offset + 1 <= endOffset);\n        const byteBuf = new Uint8Array(this.buffer.slice(this.offset, this.realOffset += 1));\n        return byteBuf[0];\n    }\n\n    peekByte(endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        // if (!(this.offset + 1 <= endOffset)) debugger;\n        // console.assert(this.offset + 1 <= endOffset);\n        const byteBuf = new Uint8Array(this.buffer.slice(this.offset, this.realOffset + 1));\n        return byteBuf[0];\n    }\n\n    readFloat(endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        // if (!(this.offset + 4 <= endOffset)) debugger;\n        // console.assert(this.offset + 4 <= endOffset);\n        const floatBuf = new Float32Array(this.buffer.slice(this.offset, this.realOffset += 4));\n        return floatBuf[0];\n    }\n\n    readDouble(endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        // if (!(this.offset + 8 <= endOffset)) debugger;\n        // console.assert(this.offset + 8 <= endOffset);\n        const doubleBuf = new Float64Array(this.buffer.slice(this.offset, this.realOffset += 8));\n        return doubleBuf[0];\n    }\n\n    readbzString(endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        const str = this.readbString(endOffset);\n\n        // Remove the null byte at the end of the string\n        return str.slice(0, -1);\n    }\n\n    readbString(endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        // if (!(this.offset + 1 <= endOffset)) debugger;\n        // console.assert(this.offset + 1 <= endOffset);\n        const strLen = this.readByte(endOffset);\n\n        // if (!(this.offset + strLen <= endOffset)) debugger;\n        // console.assert(this.offset + strLen <= endOffset);\n        const str = this.readString(strLen, endOffset);\n\n        return str;\n    }\n\n    readString(len: number, endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        // if (!(this.offset + len <= endOffset)) debugger;\n        // console.assert(this.offset + len <= endOffset);\n        return String.fromCharCode(...new Uint8Array(this.buffer.slice(this.offset, this.realOffset += len)));\n    }\n\n    readByteArray(len: number, endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        // if (!(this.offset + len <= endOffset)) debugger;\n        // console.assert(this.offset + len <= endOffset);\n        return [...new Uint8Array(this.buffer.slice(this.offset, this.realOffset += len))];\n    }\n\n    readShortArray(len: number, endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        // if (!(this.offset + (len * 2) <= endOffset)) debugger;\n        // console.assert(this.offset + (len * 2) <= endOffset);\n        return [...new Uint16Array(this.buffer.slice(this.offset, this.realOffset += (len * 2)))];\n    }\n\n    readIntArray(len: number, endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        // if (!(this.offset + (len * 4) <= endOffset)) debugger;\n        // console.assert(this.offset + (len * 4) <= endOffset);\n        return [...new Uint32Array(this.buffer.slice(this.offset, this.realOffset += (len * 4)))];\n    }\n\n    readFloatArray(len: number, endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        // if (!(this.offset + (len * 4) <= endOffset)) debugger;\n        // console.assert(this.offset + (len * 4) <= endOffset);\n        return [...new Float32Array(this.buffer.slice(this.offset, this.realOffset += (len * 4)))];\n    }\n\n    readDoubleArray(len: number, endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        // if (!(this.offset + (len * 8) <= endOffset)) debugger;\n        // console.assert(this.offset + (len * 8) <= endOffset);\n        return [...new Float64Array(this.buffer.slice(this.offset, this.realOffset += (len * 8)))];\n    }\n\n    readbStringArray(len: number, endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        let ret: string[] = [];\n        for (let i = 0; i < len; ++i) {\n            ret.push(this.readbString(endOffset));\n        }\n        return ret;\n    }\n\n    readbzStringArray(len: number, endOffset?: number) {\n        endOffset ??= this.buffer.byteLength;\n        let ret: string[] = [];\n        for (let i = 0; i < len; ++i) {\n            ret.push(this.readbzString(endOffset));\n        }\n        return ret;\n    }\n\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Record from \"./record\";\nimport { SaveBuffer } from \"./util\";\n\nexport class RecordAI {\n    neverRun: boolean;\n\n    constructor(record: Record, buf: SaveBuffer) {\n        this.neverRun = (record.flags & 0x10000000) === 0x10000000;\n        if (buf.buffer.byteLength !== buf.offset) {\n            debugger;\n        }\n    }\n}","import Record from \"./record\";\nimport { SaveBuffer } from \"./util\";\n\nexport class RecordBook {\n    flags?: number;\n    value?: number;\n    teaches?: number;\n    constructor(record: Record, buf: SaveBuffer) {\n        if (record.flags & 0x1) {\n            this.flags = buf.readInt();\n        }\n        if (record.flags & 0x8) {\n            this.value = buf.readInt();\n        }\n        if (record.flags & 0x4) {\n            this.teaches = buf.readByte();\n        }\n        if (buf.buffer.byteLength !== buf.offset) {\n            debugger;\n        }\n    }\n}","import Record from \"./record\";\nimport { SaveBuffer } from \"./util\";\n\nexport class RecordCell {\n    cellCreated: boolean;\n    unknown2: boolean;\n    unknown26: number[] = [];\n    time?: number;\n    flags?: number;\n\n    seenUnknown: number[] = [];\n    dataNum?: number;\n    dataFlags?: number;\n    data: number[][] = [];\n\n    fullName?: string;\n\n    owner?: number;\n\n    pathgridDataLen?: number;\n    pathgridData: number[] = [];\n\n    constructor(record: Record, buf: SaveBuffer) {\n        let startOffset = buf.offset;\n        this.cellCreated = (record.flags & 0x1) === 0x1;\n        this.unknown2 = (record.flags & 0x4) === 0x4;\n\n        if (record.flags & 0x4000000) {\n            this.unknown26 = buf.readByteArray(4);\n        }\n\n        if (record.flags & 0x8000000) {\n            this.time = buf.readInt();\n        }\n\n        if (record.flags & 0x8) {\n            this.flags = buf.readByte();\n        }\n\n        if (record.flags & 0x10000000) {\n            // Due to the format of this not being well understood, this part is complex.\n            // Basically just try from the biggest format to smallest, and if the size exceeds the record length,\n            // retry with the next smallest\n            let clone: SaveBuffer | undefined;\n            for (let seenType = 4; seenType >= 0; --seenType) {\n                clone = buf.clone();\n                if ((record.dataSize - clone.offset) >= 32 && seenType > 0) {\n                    this.seenUnknown = clone.readByteArray(32);\n                }\n                if ((record.dataSize - clone.offset) >= 2 && seenType > 1) {\n                    this.dataNum = clone.readShort();\n                }\n                if ((record.dataSize - clone.offset) >= 2 && seenType > 2) {\n                    this.dataFlags = clone.readShort();\n                }\n                if ((record.dataSize - clone.offset) >= (34*((this.dataNum??0)-1)) && seenType > 3) {\n                    for (let i = 0; i < (this.dataNum ?? 0) - 1; ++i) {\n                        this.data.push(clone.readByteArray(34));\n                        if (clone.offset > startOffset + record.dataSize) break;\n                    }\n                }\n                if (record.flags & 0x10 && (record.dataSize - clone.offset) >= 1 && (record.dataSize - clone.offset) >= 1 + clone.peekByte()) {\n                    this.fullName = clone.readbString();\n                }\n        \n                if (record.flags & 0x20 && (record.dataSize - clone.offset) >= 4) {\n                    this.owner = clone.readInt();\n                }\n        \n                if (record.flags & 0x1000000 && (record.dataSize - clone.offset) >= 2 && (record.dataSize - clone.offset) >= 2 + (clone.peekShort() * 2)) {\n                    this.pathgridDataLen = clone.readShort();\n                    this.pathgridData = clone.readShortArray(this.pathgridDataLen);\n                }\n                // Now check to make sure we consumed all data, reset if not\n                if ((clone.offset - startOffset) !== record.dataSize) {\n                    if (seenType === 0) {\n                        debugger;\n                    }\n                    delete this.dataNum;\n                    delete this.dataFlags;\n                    delete this.fullName;\n                    delete this.owner;\n                    delete this.pathgridDataLen;\n                    this.seenUnknown = [];\n                    this.data = [];\n                    this.pathgridData = [];\n                } else {\n                    break;\n                }\n            }\n            if (clone) {\n                buf.advance(clone.offset - buf.offset);\n            }\n        } else {\n            if (record.flags & 0x10) {\n                this.fullName = buf.readbString();\n            }\n    \n            if (record.flags & 0x20) {\n                this.owner = buf.readInt();\n            }\n    \n            if (record.flags & 0x1000000) {\n                this.pathgridDataLen = buf.readShort();\n                for (let i = 0; i < this.pathgridDataLen; ++i) {\n                    this.pathgridData.push(buf.readShort());\n                }\n            }\n        }\n        if (buf.buffer.byteLength !== buf.offset) {\n            debugger;\n        }\n    }\n}","import Record from \"./record\";\nimport { SaveBuffer } from \"./util\";\n\nexport class RecordCreature {\n    flags?: number;\n\n    strength?: number;\n    intelligence?: number;\n    willpower?: number;\n    agility?: number;\n    speed?: number;\n    endurance?: number;\n    personality?: number;\n    luck?: number;\n\n    dataFlags?: number;\n    baseMagicka?: number;\n    baseFatigue?: number;\n    barterGold?: number;\n    level?: number;\n    calcMin?: number;\n    calcMax?: number;\n\n    factionsNum?: number;\n    factions: {\n        faction: number;\n        factionRank: number;\n    }[] = [];\n\n    spellCount?: number;\n    spellIds: number[] = [];\n\n    aiData: number[] = [];\n\n    baseHealth?: number;\n\n    modCount?: number;\n    modifiers: {\n        valueIndex: number;\n        modValue: number;\n    }[] = [];\n\n    fullName?: string;\n\n    armorer?: number;\n    athletics?: number;\n    blade?: number;\n    block?: number;\n    blunt?: number;\n    handToHand?: number;\n    heavyArmor?: number;\n    alchemy?: number;\n    alteration?: number;\n    conjuration?: number;\n    destruction?: number;\n    illusion?: number;\n    mysticism?: number;\n    restoration?: number;\n    acrobatics?: number;\n    lightArmor?: number;\n    marksman?: number;\n    mercantile?: number;\n    security?: number;\n    sneak?: number;\n    speechcraft?: number;\n\n    combatStyle?: number;\n\n    constructor(record: Record, buf: SaveBuffer) {\n        if (record.flags & 0x1) {\n            this.flags = buf.readInt();\n        }\n\n        if (record.flags & 0x8) {\n            this.strength = buf.readByte();\n            this.intelligence = buf.readByte();\n            this.willpower = buf.readByte();\n            this.agility = buf.readByte();\n            this.speed = buf.readByte();\n            this.endurance = buf.readByte();\n            this.personality = buf.readByte();\n            this.luck = buf.readByte();\n        }\n\n        if (record.flags & 0x10) {\n            this.dataFlags = buf.readInt();\n            this.baseMagicka = buf.readShort();\n            this.baseFatigue = buf.readShort();\n            this.barterGold = buf.readShort();\n            this.level = buf.readShort();\n            this.calcMin = buf.readShort();\n            this.calcMax = buf.readShort();\n        }\n\n        if (record.flags & 0x40) {\n            this.factionsNum = buf.readShort();\n            for (let i = 0; i < this.factionsNum; ++i) {\n                let faction = buf.readInt();\n                let factionRank = buf.readByte();\n                this.factions.push({\n                    faction: faction,\n                    factionRank: factionRank,\n                });\n            }\n        }\n\n        if (record.flags & 0x20) {\n            this.spellCount = buf.readShort();\n            for (let i = 0; i < this.spellCount; ++i) {\n                this.spellIds.push(buf.readInt());\n            }\n        }\n\n        if (record.flags & 0x100) {\n            this.aiData.push(buf.readByte());\n            this.aiData.push(buf.readByte());\n            this.aiData.push(buf.readByte());\n            this.aiData.push(buf.readByte());\n        }\n\n        if (record.flags & 0x4) {\n            this.baseHealth = buf.readInt();\n        }\n\n        if (record.flags & 0x10000000) {\n            this.modCount = buf.readShort();\n            for (let i = 0; i < this.modCount; ++i) {\n                let index = buf.readByte();\n                let mod = buf.readFloat();\n                this.modifiers.push({\n                    valueIndex: index,\n                    modValue: mod,\n                });\n            }\n        }\n\n        if (record.flags & 0x80) {\n            this.fullName = buf.readbString();\n        }\n\n        if (record.flags & 0x200) {\n            this.armorer = buf.readByte();\n            this.athletics = buf.readByte();\n            this.blade = buf.readByte();\n            this.block = buf.readByte();\n            this.blunt = buf.readByte();\n            this.handToHand = buf.readByte();\n            this.heavyArmor = buf.readByte();\n            this.alchemy = buf.readByte();\n            this.alteration = buf.readByte();\n            this.conjuration = buf.readByte();\n            this.destruction = buf.readByte();\n            this.illusion = buf.readByte();\n            this.mysticism = buf.readByte();\n            this.restoration = buf.readByte();\n            this.acrobatics = buf.readByte();\n            this.lightArmor = buf.readByte();\n            this.marksman = buf.readByte();\n            this.mercantile = buf.readByte();\n            this.security = buf.readByte();\n            this.sneak = buf.readByte();\n            this.speechcraft = buf.readByte();\n        }\n\n        if (record.flags & 0x400) {\n            this.combatStyle = buf.readInt();\n        }\n        if (buf.buffer.byteLength !== buf.offset) {\n            debugger;\n        }\n    }\n}","import { SaveBuffer } from \"./util\";\n\nexport class Property{\n    flag: number;\n    // @TODO: More strict typing here?\n    value: any;\n\n    constructor(flag: number, value: any){\n        this.flag = flag;\n        this.value = value;\n    }\n}\n\nexport class PropertyCollection{\n    propertiesNum: number;\n    properties: Property[];\n\n    constructor(propertiesNum: number, properties: Property[]){\n        this.propertiesNum = propertiesNum;\n        this.properties = properties;\n    }\n}\n\nlet getProps = (buf: SaveBuffer, endOffset: number): PropertyCollection => {\n    let propertiesNum = buf.readShort();\n    let properties: Property[] = [];\n    if (buf.offset > endOffset) {/* console.log('Invalid object props', propertiesNum, offset, endOffset); */ return {propertiesNum, properties};}\n    for (let k = 0; k < propertiesNum; ++k) {\n        let flag = buf.readByte();\n        if (buf.offset > endOffset) {/* console.log('Invalid object props', propertiesNum, offset, endOffset); */ return {propertiesNum, properties};}\n        let value: any = undefined;\n        // This is ugly\n        switch(flag) {\n            case 0x11:\n                value = buf.readInt();\n                break;\n            case 0x12:\n                value = {};\n                value.scriptref = buf.readInt();\n                value.varNum = buf.readShort();\n                value.variables = [];\n                for (let l = 0; l < value.varNum; ++l) {\n                    let _var: any = {};\n                    _var.varIndex = buf.readShort();\n                    _var.varType = buf.readShort();\n                    if (_var.varType === 0xF000) {\n                        _var.refVar = buf.readInt();\n                    }\n                    if (_var.varType === 0) {\n                        _var.refVar = buf.readDouble();\n                    }\n                    value.variables.push(_var);\n                    if (buf.offset > endOffset) {/* console.log('Invalid object props', propertiesNum, offset, endOffset); */ return {propertiesNum, properties};}\n                }\n                value.unknown = buf.readByte();\n                break;\n            case 0x1b:\n                value = 1;\n                break;\n            case 0x1c:\n                value = 1;\n                break;\n            case 0x1e:\n                value = {};\n                value.cell = buf.readInt();\n                value.x = buf.readFloat();\n                value.y = buf.readFloat();\n                value.z = buf.readFloat();\n                value.flags = buf.readInt();\n                break;\n            case 0x1f:\n                value = {};\n                value.package = buf.readInt();\n                value.flags = buf.readInt();\n                value.package2 = buf.readInt();\n                value.unknown = buf.readShort();\n                break;\n            case 0x20:\n                value = {};\n                value.formId = buf.readInt();\n                value.data = buf.readByteArray(59);\n                break;\n            case 0x21:\n                value = {};\n                value.dataNum = buf.readShort();\n                value.data = [];\n                for (let l = 0; l < value.dataNum; ++l) {\n                    let data: any = {};\n                    data.iref = buf.readInt();\n                    data.unknown = buf.readByte();\n                    value.data.push(data);\n                    if (buf.offset > endOffset) {/* console.log('Invalid object props', propertiesNum, offset, endOffset); */ return {propertiesNum, properties};}\n                }\n                break;\n            case 0x22:\n                value = buf.readInt();\n                break;\n            case 0x23:\n                value = {};\n                value.dataNum = buf.readShort();\n                value.data = [];\n                for (let l = 0; l < value.dataNum; ++l) {\n                    value.data.push(buf.readInt());\n                    if (buf.offset > endOffset) {/* console.log('Invalid object props', propertiesNum, offset, endOffset); */ return {propertiesNum, properties};}\n                }\n                break;\n            case 0x25:\n                value = 1;\n                break;\n            case 0x27:\n                value = buf.readInt();\n                break;\n            case 0x28:\n                value = buf.readInt();\n                break;\n            case 0x29:\n                value = buf.readInt();\n                break;\n            case 0x2a:\n                value = buf.readShort();\n                break;\n            case 0x2b:\n                value = buf.readFloat();\n                break;\n            case 0x2c:\n                value = buf.readByte();\n                break;\n            case 0x2d:\n                value = buf.readFloat();\n                break;\n            case 0x2e:\n                value = buf.readFloat();\n                break;\n            case 0x2f:\n                value = buf.readByte();\n                break;\n            case 0x31:\n                value = {};\n                value.lockLevel = buf.readByte();\n                value.key = buf.readInt();\n                value.flag = buf.readByte();\n                break;\n            case 0x32:\n                value = {};\n                value.x = buf.readFloat();\n                value.y = buf.readFloat();\n                value.z = buf.readFloat();\n                value.rX = buf.readFloat();\n                value.rY = buf.readFloat();\n                value.rZ = buf.readFloat();\n                value.destDoor = buf.readInt();\n                break;\n            case 0x33:\n                value = buf.readByte();\n                break;\n            case 0x35:\n                // ?????\n                //debugger;\n                break;\n            case 0x36:\n                value = buf.readByteArray(5);\n                break;\n            case 0x37:\n                value = buf.readFloat();\n                break;\n            case 0x39:\n                value = buf.readByteArray(12);\n                break;\n            case 0x3a:\n                value = {};\n                value.iref = buf.readInt();\n                value.dataNum = buf.readShort();\n                value.data = [];\n                for (let i = 0; i < value.dataNum; ++i) {\n                    value.data.push(buf.readByteArray(61));\n                    if (buf.offset > endOffset) {/* console.log('Invalid object props', propertiesNum, offset, endOffset); */ return {propertiesNum, properties};}\n                }\n                break;\n            case 0x3c:\n                value = buf.readInt();\n                break;\n            case 0x3d:\n                value = buf.readFloat();\n                break;\n            case 0x3e:\n                value = {};\n                value.door = buf.readInt();\n                value.x = buf.readFloat();\n                value.y = buf.readFloat();\n                value.z = buf.readFloat();\n                break;\n            case 0x41:\n                value = buf.readFloat();\n                break;\n            case 0x47:\n                value = 1;\n                break;\n            case 0x48:\n                value = buf.readInt();\n                break;\n            case 0x4a:\n                value = buf.readbString();\n                break;\n            case 0x4b:\n                value = {};\n                value.unknown = buf.readInt();\n                value.dataNum = buf.readShort();\n                value.data = buf.readByteArray(value.dataNum);\n                // uesp states that sometimes there's 2 extra null bytes here. That's actually a 0x0000 havok moved length apparently?\n                break;\n            case 0x4e:\n                value = {};\n                value.dataNum = buf.readShort();\n                value.data = [];\n                for (let i = 0; i < value.dataNum; ++i) {\n                    value.data.push(buf.readByteArray(10));\n                    if (buf.offset > endOffset) {/* console.log('Invalid object props', propertiesNum, offset, endOffset); */ return {propertiesNum, properties};}\n                }\n                break;\n            case 0x4f:\n                value = buf.readByteArray(4);\n                break;\n            case 0x50:\n                value = 1;\n                break;\n            case 0x52:\n                value = buf.readInt();\n                break;\n            case 0x53:\n                value = buf.readInt();\n                break;\n            case 0x55:\n                value = buf.readByte();\n                break;\n            case 0x59:\n                value = {};\n                value.convTopic = buf.readbString();\n                value.unknown = buf.readByte();\n                value.convNum = buf.readByte();\n                value.conv = [];\n                for (let l = 0; l < value.convNum; ++l) {\n                    let conv: any = {};\n                    conv.index = buf.readByte();\n                    conv.convQuest = buf.readInt();\n                    conv.convDialog = buf.readInt();\n                    conv.convInfo = buf.readInt();\n                    value.conv.push(conv);\n                    if (buf.offset > endOffset) {/* console.log('Invalid object props', propertiesNum, offset, endOffset); */ return {propertiesNum, properties};}\n                }\n                break;\n            case 0x5a:\n                value = buf.readByte();\n                break;\n            case 0x5c:\n                value = buf.readFloat();\n                break;\n        }\n        properties.push({\n            flag: flag,\n            value: value,\n        });\n        if (buf.offset > endOffset) {/* console.log('Invalid object props', propertiesNum, offset, endOffset); */ return {propertiesNum, properties};}\n    }\n\n    return {\n        propertiesNum,\n        properties,\n    };\n};\n\nexport default getProps;\n","import { RecordAI } from \"./record_ai\";\nimport { RecordBook } from \"./record_book\";\nimport { RecordCell } from \"./record_cell\";\nimport { RecordCreature } from \"./record_creature\";\nimport { RecordCreatureReference } from \"./record_creaturereference\";\nimport { RecordDialog } from \"./record_dialog\";\nimport { RecordFaction } from \"./record_faction\";\nimport { RecordGeneric } from \"./record_generic\";\nimport { RecordInstanceReference } from \"./record_instancereference\";\nimport { RecordQuest } from \"./record_quest\";\nimport { SaveBuffer } from \"./util\";\n\nexport enum RecordType {\n    Faction = 6,\n    AlchemicalApparatus = 19,\n    Armor = 20,\n    Book = 21,\n    Clothing = 22,\n    Ingredient = 25,\n    Light = 26,\n    Miscellaneous = 27,\n    Weapon = 33,\n    Ammo = 34,\n    NPC = 35,\n    Creature = 36,\n    SoulGem = 38,\n    Key = 39,\n    Potion = 40,\n    Cell = 48,\n    InstanceReference = 49,\n    CharacterReference = 50,\n    CreatureReference = 51,\n    Dialog = 58,\n    Quest = 59,\n    AI = 61,\n};\n\nexport default class Record {\n    formId = 0;\n    type = 0;\n    flags = 0;\n    version = 0;\n    dataSize = 0;\n    data?: number[];\n\n    parsedSubRecord?: RecordBook | RecordFaction | RecordGeneric | RecordCreature | RecordCell | RecordDialog | RecordAI;\n\n    get subRecord(): RecordBook | RecordFaction | RecordGeneric | RecordCreature | RecordCell | RecordDialog | RecordAI | undefined {\n        if (!this.data) return this.parsedSubRecord;\n\n        const tmpBuffer = new ArrayBuffer(this.dataSize);\n        const tmpView = new Uint8Array(tmpBuffer);\n        for (let i = 0; i < this.dataSize; ++i) tmpView[i] = this.data[i];\n\n        const clone = new SaveBuffer(tmpBuffer, 0);\n\n        switch(this.type) {\n            case RecordType.Book:\n                this.parsedSubRecord = new RecordBook(this, clone);\n                break;\n            case RecordType.Faction:\n                this.parsedSubRecord = new RecordFaction(this, clone);\n                break;\n            case RecordType.AlchemicalApparatus:\n            case RecordType.Armor:\n            case RecordType.Clothing:\n            case RecordType.Ingredient:\n            case RecordType.Light:\n            case RecordType.Miscellaneous:\n            case RecordType.Ammo:\n            case RecordType.SoulGem:\n            case RecordType.Potion:\n            case RecordType.Weapon:\n            case RecordType.Key:\n                this.parsedSubRecord = new RecordGeneric(this, clone);\n                break;\n            case RecordType.NPC:\n            case RecordType.Creature:\n                this.parsedSubRecord = new RecordCreature(this, clone);\n                break;\n            case RecordType.Cell:\n                this.parsedSubRecord = new RecordCell(this, clone);\n                break;\n            case RecordType.InstanceReference:\n                this.parsedSubRecord = new RecordInstanceReference(this, clone);\n                break;\n            case RecordType.CharacterReference:\n            case RecordType.CreatureReference:\n                this.parsedSubRecord = new RecordCreatureReference(this, clone);\n                break;\n            case RecordType.Dialog:\n                this.parsedSubRecord = new RecordDialog(this, clone);\n                break;\n            case RecordType.Quest:\n                this.parsedSubRecord = new RecordQuest(this, clone);\n                break;\n            case RecordType.AI:\n                this.parsedSubRecord = new RecordAI(this, clone);\n                break;\n        }\n        if (this.parsedSubRecord) delete this.data;\n        return this.parsedSubRecord;\n    }\n\n    constructor(buf: SaveBuffer) {\n        this.formId = buf.readInt();\n        this.type = buf.readByte();\n        this.flags = buf.readInt();\n        this.version = buf.readByte();\n        this.dataSize = buf.readShort();\n        this.data = buf.readByteArray(this.dataSize);\n    }\n}","import getProps, { PropertyCollection } from \"./properties\";\nimport Record from \"./record\";\nimport { InventoryItem } from \"./inventoryitem\";\nimport { SaveBuffer } from \"./util\";\n\nclass PlayerObject {\n    statistics: {\n        skillAdvances: number;\n        unknown1: number;\n        largestBounty: number;\n        killedCreatures: number;\n        killedPersons: number;\n        exploredPlaces: number;\n        lockPicked: number;\n        picksBroken: number;\n        capturedSouls: number;\n        usedIngredients: number;\n        mixedPotions: number;\n        oblivionGatesClosed: number;\n        horsesOwned: number;\n        housesOwned: number;\n        investments: number;\n        booksRead: number;\n        teachingBooksRead: number;\n        artifactsFound: number;\n        hoursSlept: number;\n        hoursWaited: number;\n        unknown2: number;\n        unknown3: number;\n        unknown4: number;\n        jokesTold: number;\n        disease: number;\n        nirnrootFound: number;\n        burglary: number;\n        pickpocketing: number;\n        unknown5: number;\n        attacks: number;\n        murder: number;\n        stolenHorses: number;\n        unknown6: number;\n        unknown7: number;\n    };\n    unknown1?: number;\n    unknown2?: number[];\n    unknown3?: number[];\n    pcBirthsign?: number;\n    unknownArray?: number[];\n    num2?: number;\n    unknown4?: number[];\n    unknown5?: number[][];\n    unknown6?: number[];\n    randODoorsNum?: number;\n    randODoors?: {\n        door: number;\n        flag: number;\n    }[];\n    unknown7?: number[];\n    activeEffectsNum?: number;\n    activeEffects?: {\n        size: number;\n        reference: number;\n        index: number;\n        effectDetails: number[];\n    }[];\n    expPoints?: {\n        armorer: number;\n        athletics: number;\n        blade: number;\n        block: number;\n        blunt: number;\n        handToHand: number;\n        heavyArmor: number;\n        alchemy: number;\n        alteration: number;\n        conjuration: number;\n        destruction: number;\n        illusion: number;\n        mysticism: number;\n        restoration: number;\n        acrobatics: number;\n        lightArmor: number;\n        marksman: number;\n        mercantile: number;\n        security: number;\n        sneak: number;\n        speechcraft: number;\n    };\n    advancement?: number;\n    attrSkillCounts?: {\n        strength: number;\n        intelligence: number;\n        willpower: number;\n        agility: number;\n        speed: number;\n        endurance: number;\n        personality: number;\n        luck: number;\n    }[];\n    specCounts?: {\n        combat: number;\n        magic: number;\n        stealth: number;\n    };\n    skillUsage?: {\n        armorer: number;\n        athletics: number;\n        blade: number;\n        block: number;\n        blunt: number;\n        handToHand: number;\n        heavyArmor: number;\n        alchemy: number;\n        alteration: number;\n        conjuration: number;\n        destruction: number;\n        illusion: number;\n        mysticism: number;\n        restoration: number;\n        acrobatics: number;\n        lightArmor: number;\n        marksman: number;\n        mercantile: number;\n        security: number;\n        sneak: number;\n        speechcraft: number;\n    };\n    majorSkillAdv?: number;\n    unknown8?: number;\n    activeQuest?: number;\n    knownTopicsNum?: number;\n    knownTopics?: number[];\n    openQuestsNum?: number;\n    openQuests?: {\n        quest: number;\n        questStage: number;\n        logEntry: number;\n    }[];\n    magEffectNum?: number;\n    magEffects?: {\n        edid: string;\n    }[];\n\n    fgGeoSym?: number[];\n    fgGeoAsym?: number[];\n    fgTexSym?: number[];\n    race?: number;\n    hair?: number;\n    eyes?: number;\n    hairLength?: number;\n    hairColor?: number[];\n    unknown9?: number;\n    gender?: number;\n    pcName?: string;\n    pcClass?: number;\n    customClass_favoredAttribute1?: number;\n    customClass_favoredAttribute2?: number;\n    customClass_specialization?: number;\n    customClass_majorSkill1?: number;\n    customClass_majorSkill2?: number;\n    customClass_majorSkill3?: number;\n    customClass_majorSkill4?: number;\n    customClass_majorSkill5?: number;\n    customClass_majorSkill6?: number;\n    customClass_majorSkill7?: number;\n    customClass_flags?: number;\n    customClass_services?: number;\n    customClass_skillTrained?: number;\n    customClass_maxTrainingLevel?: number;\n    customClass_unused?: number[];\n    customClass_name?: string;\n    customClass_icon?: string;\n    unknown10?: number;\n\n    constructor(buf: SaveBuffer, maxOffset: number) {\n        this.statistics = {\n            skillAdvances: buf.readInt(maxOffset),\n            unknown1: buf.readInt(maxOffset),\n            largestBounty: buf.readInt(maxOffset),\n            killedCreatures: buf.readInt(maxOffset),\n            killedPersons: buf.readInt(maxOffset),\n            exploredPlaces: buf.readInt(maxOffset),\n            lockPicked: buf.readInt(maxOffset),\n            picksBroken: buf.readInt(maxOffset),\n            capturedSouls: buf.readInt(maxOffset),\n            usedIngredients: buf.readInt(maxOffset),\n            mixedPotions: buf.readInt(maxOffset),\n            oblivionGatesClosed: buf.readInt(maxOffset),\n            horsesOwned: buf.readInt(maxOffset),\n            housesOwned: buf.readInt(maxOffset),\n            investments: buf.readInt(maxOffset),\n            booksRead: buf.readInt(maxOffset),\n            teachingBooksRead: buf.readInt(maxOffset),\n            artifactsFound: buf.readInt(maxOffset),\n            hoursSlept: buf.readInt(maxOffset),\n            hoursWaited: buf.readInt(maxOffset),\n            unknown2: buf.readInt(maxOffset),\n            unknown3: buf.readInt(maxOffset),\n            unknown4: buf.readInt(maxOffset),\n            jokesTold: buf.readInt(maxOffset),\n            disease: buf.readInt(maxOffset),\n            nirnrootFound: buf.readInt(maxOffset),\n            burglary: buf.readInt(maxOffset),\n            pickpocketing: buf.readInt(maxOffset),\n            unknown5: buf.readInt(maxOffset),\n            attacks: buf.readInt(maxOffset),\n            murder: buf.readInt(maxOffset),\n            stolenHorses: buf.readInt(maxOffset),\n            unknown6: buf.readInt(maxOffset),\n            unknown7: buf.readInt(maxOffset),\n        };\n        if (buf.offset > maxOffset) return;\n        this.unknown1 = buf.readByte(maxOffset);\n        this.unknown2 = buf.readByteArray(95);\n        this.unknown3 = buf.readByteArray(22);\n        this.pcBirthsign = buf.readInt(maxOffset);\n        this.unknownArray = [];\n        for (let i = 0; i < 13; ++i) {\n            this.unknownArray.push(buf.readInt(maxOffset));\n        }\n        if (buf.offset > maxOffset) return;\n        this.num2 = buf.readShort(maxOffset);\n        this.unknown4 = buf.readByteArray(2);\n        this.unknown5 = [];\n        for (let i = 0; i < this.num2; ++i) {\n            this.unknown5.push(buf.readByteArray(4));\n        }\n        if (buf.offset > maxOffset) return;\n        this.unknown6 = buf.readByteArray(2);\n        this.randODoorsNum = buf.readShort(maxOffset);\n        this.randODoors = [];\n        for (let i = 0; i < this.randODoorsNum; ++i) {\n            this.randODoors.push({\n                door: buf.readInt(maxOffset),\n                flag: buf.readByte(maxOffset),\n            });\n        }\n        if (buf.offset > maxOffset) return;\n        this.unknown7 = buf.readByteArray(2);\n        this.activeEffectsNum = buf.readShort(maxOffset);\n        this.activeEffects = [];\n        for (let i = 0; i < this.activeEffectsNum; ++i) {\n            let size = buf.readShort(maxOffset);\n            this.activeEffects.push({\n                size: size,\n                reference: buf.readInt(maxOffset),\n                index: buf.readByte(maxOffset),\n                effectDetails: buf.readByteArray(size),\n            });\n        }\n        if (buf.offset > maxOffset) return;\n        this.expPoints = {\n            armorer: buf.readFloat(maxOffset),\n            athletics: buf.readFloat(maxOffset),\n            blade: buf.readFloat(maxOffset),\n            block: buf.readFloat(maxOffset),\n            blunt: buf.readFloat(maxOffset),\n            handToHand: buf.readFloat(maxOffset),\n            heavyArmor: buf.readFloat(maxOffset),\n            alchemy: buf.readFloat(maxOffset),\n            alteration: buf.readFloat(maxOffset),\n            conjuration: buf.readFloat(maxOffset),\n            destruction: buf.readFloat(maxOffset),\n            illusion: buf.readFloat(maxOffset),\n            mysticism: buf.readFloat(maxOffset),\n            restoration: buf.readFloat(maxOffset),\n            acrobatics: buf.readFloat(maxOffset),\n            lightArmor: buf.readFloat(maxOffset),\n            marksman: buf.readFloat(maxOffset),\n            mercantile: buf.readFloat(maxOffset),\n            security: buf.readFloat(maxOffset),\n            sneak: buf.readFloat(maxOffset),\n            speechcraft: buf.readFloat(maxOffset),\n        };\n        if (buf.offset > maxOffset) return;\n        this.advancement = buf.readInt(maxOffset);\n        this.attrSkillCounts = [];\n        for (let i = 0; i < this.advancement; ++i) {\n            this.attrSkillCounts.push({\n                strength: buf.readByte(maxOffset),\n                intelligence: buf.readByte(maxOffset),\n                willpower: buf.readByte(maxOffset),\n                agility: buf.readByte(maxOffset),\n                speed: buf.readByte(maxOffset),\n                endurance: buf.readByte(maxOffset),\n                personality: buf.readByte(maxOffset),\n                luck: buf.readByte(maxOffset),\n            });\n            if (buf.offset > maxOffset) return;\n        }\n        this.specCounts = {\n            combat: buf.readByte(maxOffset),\n            magic: buf.readByte(maxOffset),\n            stealth: buf.readByte(maxOffset),\n        };\n        if (buf.offset > maxOffset) return;\n        this.skillUsage = {\n            armorer: buf.readInt(maxOffset),\n            athletics: buf.readInt(maxOffset),\n            blade: buf.readInt(maxOffset),\n            block: buf.readInt(maxOffset),\n            blunt: buf.readInt(maxOffset),\n            handToHand: buf.readInt(maxOffset),\n            heavyArmor: buf.readInt(maxOffset),\n            alchemy: buf.readInt(maxOffset),\n            alteration: buf.readInt(maxOffset),\n            conjuration: buf.readInt(maxOffset),\n            destruction: buf.readInt(maxOffset),\n            illusion: buf.readInt(maxOffset),\n            mysticism: buf.readInt(maxOffset),\n            restoration: buf.readInt(maxOffset),\n            acrobatics: buf.readInt(maxOffset),\n            lightArmor: buf.readInt(maxOffset),\n            marksman: buf.readInt(maxOffset),\n            mercantile: buf.readInt(maxOffset),\n            security: buf.readInt(maxOffset),\n            sneak: buf.readInt(maxOffset),\n            speechcraft: buf.readInt(maxOffset),\n        };\n        if (buf.offset > maxOffset) return;\n        this.majorSkillAdv = buf.readInt(maxOffset);\n        this.unknown8 = buf.readByte(maxOffset);\n        this.activeQuest = buf.readInt(maxOffset);\n        this.knownTopicsNum = buf.readShort(maxOffset);\n        this.knownTopics = [];\n        for (let i = 0; i < this.knownTopicsNum; ++i) {\n            this.knownTopics.push(buf.readInt(maxOffset));\n        }\n        if (buf.offset > maxOffset) return;\n        this.openQuestsNum = buf.readShort(maxOffset);\n        this.openQuests = [];\n        for (let i = 0; i < this.openQuestsNum; ++i) {\n            this.openQuests.push({\n                quest: buf.readInt(maxOffset),\n                questStage: buf.readByte(maxOffset),\n                logEntry: buf.readByte(maxOffset),\n            });\n        }\n        if (buf.offset > maxOffset) return;\n        this.magEffectNum = buf.readInt(maxOffset);\n        this.magEffects = [];\n        for (let i = 0; i < this.magEffectNum; ++i) {\n            this.magEffects.push({edid: buf.readString(4)});\n            if (buf.offset > maxOffset) return;\n        }\n    \n        this.fgGeoSym = buf.readByteArray(200);\n        this.fgGeoAsym = buf.readByteArray(120);\n        this.fgTexSym = buf.readByteArray(200);\n        this.race = buf.readInt(maxOffset);\n        this.hair = buf.readInt(maxOffset);\n        this.eyes = buf.readInt(maxOffset);\n        this.hairLength = buf.readFloat(maxOffset);\n        this.hairColor = buf.readByteArray(3);\n        this.unknown9 = buf.readByte(maxOffset);\n        this.gender = buf.readByte(maxOffset);\n        this.pcName = buf.readbzString(maxOffset);\n        this.pcClass = buf.readInt(maxOffset);\n        // It would be more accurate to actually check if `saveFile.formIds[this.pcClass]===0x00022843` but that would require some refactoring\n        if (maxOffset > buf.offset) {\n            this.customClass_favoredAttribute1 = buf.readInt(maxOffset);\n            this.customClass_favoredAttribute2 = buf.readInt(maxOffset);\n            this.customClass_specialization = buf.readInt(maxOffset);\n            this.customClass_majorSkill1 = buf.readInt(maxOffset);\n            this.customClass_majorSkill2 = buf.readInt(maxOffset);\n            this.customClass_majorSkill3 = buf.readInt(maxOffset);\n            this.customClass_majorSkill4 = buf.readInt(maxOffset);\n            this.customClass_majorSkill5 = buf.readInt(maxOffset);\n            this.customClass_majorSkill6 = buf.readInt(maxOffset);\n            this.customClass_majorSkill7 = buf.readInt(maxOffset);\n            this.customClass_flags = buf.readInt(maxOffset);\n            this.customClass_services = buf.readInt(maxOffset);\n            this.customClass_skillTrained = buf.readByte(maxOffset);\n            this.customClass_maxTrainingLevel = buf.readByte(maxOffset);\n            this.customClass_unused = buf.readByteArray(2, maxOffset);\n            this.customClass_name = buf.readbString(maxOffset);\n            this.customClass_icon = buf.readbString(maxOffset);\n        }\n        // Looks like a formId or iref but doesn't match up?\n        this.unknown10 = buf.readInt(maxOffset);\n    }\n};\n\nexport class RecordCreatureReference {\n    cellChanged_cell?: number;\n    cellChanged_x?: number;\n    cellChanged_y?: number;\n    cellChanged_z?: number;\n\n    created_flags?: number;\n    created_baseItem?: number;\n    created_cell?: number;\n    created_x?: number;\n    created_y?: number;\n    created_z?: number;\n    created_rX?: number;\n    created_rY?: number;\n    created_rZ?: number;\n\n    moved_cell?: number;\n    moved_x?: number;\n    moved_y?: number;\n    moved_z?: number;\n    moved_rX?: number;\n    moved_rY?: number;\n    moved_rZ?: number;\n\n    havokMoved_cell?: number;\n    havokMoved_x?: number;\n    havokMoved_y?: number;\n    havokMoved_z?: number;\n    havokMoved_rX?: number;\n    havokMoved_rY?: number;\n    havokMoved_rZ?: number;\n\n    oblivionCell?: number;\n\n    tempAttributeChanges_activeEffects: number[] = [];\n    tempAttributeChanges_unknownEffects: number[] = [];\n    tempAttributeChanges_damageEffects: number[] = [];\n    tempAttributeChanges_deltaHealth?: number;\n    tempAttributeChanges_deltaMagicka?: number;\n    tempAttributeChanges_deltaFatigue?: number;\n\n    actorFlag?: number;\n\n    flags?: number;\n    inventory_itemNum?: number;\n    inventory_items: InventoryItem[] = [];\n    havokMoved_dataLen?: number;\n    havokMoved_data: number[] = [];\n    scale?: number;\n    enabled?: boolean;\n    propertiesNum?: number;\n    properties: {\n        flag: number;\n        // @TODO: More strict typing here?\n        value: any;\n    }[] = [];\n\n    player?: PlayerObject;\n    \n    constructor(record: Record, buf: SaveBuffer) {\n        // Just a type assertion for TS\n        if (!record.data) return;\n        const startOffset = buf.offset;\n        const maxOffset = startOffset + record.dataSize;\n        try {\n            // Handle player data as a special case before anything else even though it's out-of-order\n            if (record.formId === 0x14) {\n                let playerOffset = undefined;\n                for (let i = record.dataSize - 1; i >= 0; --i) {\n                    if (\n                        record.data[i] === 0x42 && record.data[i-1] === 0x96\n                        && record.data[i-21] === 0x42 && record.data[i-22] === 0xec\n                    ) {\n                        playerOffset = buf.offset + i + 29;\n                        break;\n                    }\n                }\n                if (playerOffset === undefined) {\n                    debugger;\n                } else {\n                    this.player = new PlayerObject(new SaveBuffer(buf.buffer, playerOffset), startOffset + record.dataSize);\n                }\n            }\n            if (record.flags & 0x80000000) {\n                this.cellChanged_cell = buf.readInt(maxOffset);\n                this.cellChanged_x = buf.readFloat(maxOffset);\n                this.cellChanged_y = buf.readFloat(maxOffset);\n                this.cellChanged_z = buf.readFloat(maxOffset);\n            }\n            if (record.flags & 0x2) {\n                this.created_flags = buf.readInt(maxOffset);\n                this.created_baseItem = buf.readInt(maxOffset);\n                this.created_cell = buf.readInt(maxOffset);\n                this.created_x = buf.readFloat(maxOffset);\n                this.created_y = buf.readFloat(maxOffset);\n                this.created_z = buf.readFloat(maxOffset);\n                this.created_rX = buf.readFloat(maxOffset);\n                this.created_rY = buf.readFloat(maxOffset);\n                this.created_rZ = buf.readFloat(maxOffset);\n            }\n            if (record.flags & 0x4) {\n                this.moved_cell = buf.readInt(maxOffset);\n                if (this.moved_cell === 0 && record.dataSize <= 5) {\n                    this.actorFlag = buf.readByte(maxOffset);\n                    return;\n                }\n                this.moved_x = buf.readFloat(maxOffset);\n                this.moved_y = buf.readFloat(maxOffset);\n                this.moved_z = buf.readFloat(maxOffset);\n                this.moved_rX = buf.readFloat(maxOffset);\n                this.moved_rY = buf.readFloat(maxOffset);\n                this.moved_rZ = buf.readFloat(maxOffset);\n            }\n            if (record.flags & 0x8 && !(record.flags & 0x2 || record.flags & 0x4)) {\n                this.havokMoved_cell = buf.readInt(maxOffset);\n                this.havokMoved_x = buf.readFloat(maxOffset);\n                this.havokMoved_y = buf.readFloat(maxOffset);\n                this.havokMoved_z = buf.readFloat(maxOffset);\n                this.havokMoved_rX = buf.readFloat(maxOffset);\n                this.havokMoved_rY = buf.readFloat(maxOffset);\n                this.havokMoved_rZ = buf.readFloat(maxOffset);\n            }\n            if (record.flags & 0x800000 && !(record.flags & 0x2 || record.flags & 0x4 || record.flags & 0x8)) {\n                this.oblivionCell = buf.readInt(maxOffset);\n            }\n            if (record.formId === 0x14) {\n                for (let i = 0; i < 71; ++i) {\n                    this.tempAttributeChanges_activeEffects.push(buf.readFloat(maxOffset));\n                }\n                for (let i = 0; i < 71; ++i) {\n                    this.tempAttributeChanges_unknownEffects.push(buf.readFloat(maxOffset));\n                }\n                for (let i = 0; i < 71; ++i) {\n                    this.tempAttributeChanges_damageEffects.push(buf.readFloat(maxOffset));\n                }\n                this.tempAttributeChanges_deltaHealth = buf.readFloat(maxOffset);\n                this.tempAttributeChanges_deltaMagicka = buf.readFloat(maxOffset);\n                this.tempAttributeChanges_deltaFatigue = buf.readFloat(maxOffset);\n            }\n            this.actorFlag = buf.readByte(maxOffset);\n            if (record.flags & 0x1) {\n                this.flags = buf.readInt(maxOffset);\n            }\n            if (record.flags & 0x8000000) {\n                this.inventory_itemNum = buf.readShort(maxOffset);\n                for (let i = 0; i < this.inventory_itemNum; ++i) {\n                    let iref = buf.readInt(maxOffset);\n                    let stackedItemsNum = buf.readInt(maxOffset);\n                    let changedEntriesNum = buf.readInt(maxOffset);\n                    let changedEntries: PropertyCollection[] = [];\n                    for (let j = 0; j < changedEntriesNum; ++j) {\n                        changedEntries.push(getProps(buf, startOffset + record.dataSize));\n                    }\n                    this.inventory_items.push({\n                        iref: iref,\n                        stackedItemsNum: stackedItemsNum,\n                        changedEntriesNum: changedEntriesNum,\n                        changedEntries: changedEntries,\n                    });\n                }\n            }\n            let p = getProps(buf, startOffset + record.dataSize);\n            this.propertiesNum = p.propertiesNum;\n            this.properties = p.properties;\n            if (record.flags & 0x8 && !(record.flags & 0x2 || record.flags & 0x4)) {\n                this.havokMoved_dataLen = buf.readShort(maxOffset);\n                this.havokMoved_data = buf.readByteArray(this.havokMoved_dataLen);\n            }\n            if (record.flags & 0x10) {\n                this.scale = buf.readFloat(maxOffset);\n            }\n            this.enabled = (record.flags & 0x40000000) === 0x40000000;\n        } catch (e) {\n            console.log(e);\n        }\n        if (buf.buffer.byteLength !== buf.offset) {\n            // Too many issues decoding these still\n            //debugger;\n        }\n    }\n}\n","import Record from \"./record\";\nimport { SaveBuffer } from \"./util\";\n\nexport class RecordDialog {\n    topicSaidOnce: boolean;\n\n    constructor(record: Record, buf: SaveBuffer) {\n        this.topicSaidOnce = (record.flags & 0x10000000) === 0x10000000;\n        if (buf.buffer.byteLength !== buf.offset) {\n            debugger;\n        }\n    }\n}","import Record from \"./record\";\nimport { SaveBuffer } from \"./util\";\n\ntype Reaction = {\n    unknown1: number;\n    unknown2: number;\n};\n\nexport class RecordFaction {\n    reactionsNum?: number;\n    reactions: Reaction[] = [];\n    flags?: number;\n    constructor(record: Record, buf: SaveBuffer) {\n        if (record.flags & 0x8) {\n            this.reactionsNum = buf.readShort();\n            for (let i = 0; i < this.reactionsNum; ++i) {\n                let u1 = buf.readInt();\n                let u2 = buf.readInt();\n                this.reactions.push({\n                    unknown1: u1,\n                    unknown2: u2,\n                });\n            }\n        }\n        if (record.flags & 0x4) {\n            this.flags = buf.readByte();\n        }\n        if (buf.buffer.byteLength !== buf.offset) {\n            debugger;\n        }\n    }\n}","import Record from \"./record\";\nimport { SaveBuffer } from \"./util\";\n\nexport class RecordGeneric {\n    flags?: number;\n    value?: number;\n    constructor(record: Record, buf: SaveBuffer) {\n        if (record.flags & 0x1) {\n            this.flags = buf.readInt();\n        }\n        if (record.flags & 0x8) {\n            this.value = buf.readInt();\n        }\n        if (buf.buffer.byteLength !== buf.offset) {\n            debugger;\n        }\n    }\n}","import { InventoryItem } from \"./inventoryitem\";\nimport getProps, { Property, PropertyCollection } from \"./properties\";\nimport Record from \"./record\";\nimport { SaveBuffer } from \"./util\";\n\nexport class RecordInstanceReference {\n    cellChanged_cell?: number;\n    cellChanged_x?: number;\n    cellChanged_y?: number;\n    cellChanged_z?: number;\n\n    created_flags?: number;\n    created_baseItem?: number;\n    created_cell?: number;\n    created_x?: number;\n    created_y?: number;\n    created_z?: number;\n    created_rX?: number;\n    created_rY?: number;\n    created_rZ?: number;\n\n    moved_cell?: number;\n    moved_x?: number;\n    moved_y?: number;\n    moved_z?: number;\n    moved_rX?: number;\n    moved_rY?: number;\n    moved_rZ?: number;\n\n    havokMoved_cell?: number;\n    havokMoved_x?: number;\n    havokMoved_y?: number;\n    havokMoved_z?: number;\n    havokMoved_rX?: number;\n    havokMoved_rY?: number;\n    havokMoved_rZ?: number;\n\n    oblivionCell?: number;\n\n    actorFlag?: number;\n\n    flags?: number;\n    inventory_itemNum?: number;\n    inventory_items: InventoryItem[] = [];\n    havokMoved_dataLen?: number;\n    havokMoved_data: number[] = [];\n    scale?: number;\n    enabled?: boolean;\n    propertiesNum?: number;\n    properties: Property[] = [];\n\n    constructor(record: Record, buf: SaveBuffer) {\n        const startOffset = buf.offset;\n        const maxOffset = startOffset + record.dataSize;\n        try {\n            const startOffset = buf.offset;\n            if (record.flags & 0x80000000) {\n                this.cellChanged_cell = buf.readInt(maxOffset);\n                this.cellChanged_x = buf.readFloat(maxOffset);\n                this.cellChanged_y = buf.readFloat(maxOffset);\n                this.cellChanged_z = buf.readFloat(maxOffset);\n            }\n            if (record.flags & 0x2) {\n                this.created_flags = buf.readInt(maxOffset);\n                this.created_baseItem = buf.readInt(maxOffset);\n                this.created_cell = buf.readInt(maxOffset);\n                this.created_x = buf.readFloat(maxOffset);\n                this.created_y = buf.readFloat(maxOffset);\n                this.created_z = buf.readFloat(maxOffset);\n                this.created_rX = buf.readFloat(maxOffset);\n                this.created_rY = buf.readFloat(maxOffset);\n                this.created_rZ = buf.readFloat(maxOffset);\n            }\n            if (record.flags & 0x4) {\n                this.moved_cell = buf.readInt(maxOffset);\n                if (this.moved_cell === 0 && record.dataSize <= 5) {\n                    this.actorFlag = buf.readByte(maxOffset);\n                    return;\n                }\n                this.moved_x = buf.readFloat(maxOffset);\n                this.moved_y = buf.readFloat(maxOffset);\n                this.moved_z = buf.readFloat(maxOffset);\n                this.moved_rX = buf.readFloat(maxOffset);\n                this.moved_rY = buf.readFloat(maxOffset);\n                this.moved_rZ = buf.readFloat(maxOffset);\n            }\n            if (record.flags & 0x8 && !(record.flags & 0x2 || record.flags & 0x4)) {\n                this.havokMoved_cell = buf.readInt(maxOffset);\n                this.havokMoved_x = buf.readFloat(maxOffset);\n                this.havokMoved_y = buf.readFloat(maxOffset);\n                this.havokMoved_z = buf.readFloat(maxOffset);\n                this.havokMoved_rX = buf.readFloat(maxOffset);\n                this.havokMoved_rY = buf.readFloat(maxOffset);\n                this.havokMoved_rZ = buf.readFloat(maxOffset);\n            }\n            if (record.flags & 0x800000 && !(record.flags & 0x2 || record.flags & 0x4 || record.flags & 0x8)) {\n                this.oblivionCell = buf.readInt(maxOffset);\n            }\n            if (record.flags & 0x1) {\n                this.flags = buf.readInt(maxOffset);\n            }\n            if (record.flags & 0x8000000) {\n                this.inventory_itemNum = buf.readShort(maxOffset);\n                for (let i = 0; i < this.inventory_itemNum; ++i) {\n                    if (buf.offset - startOffset > record.dataSize) {/* console.log('Invalid object', record, this); */ return;}\n                    let iref = buf.readInt(maxOffset);\n                    let stackedItemsNum = buf.readInt(maxOffset);\n                    let changedEntriesNum = buf.readInt(maxOffset);\n                    let changedEntries: PropertyCollection[] = [];\n                    for (let j = 0; j < changedEntriesNum; ++j) {\n                        if (buf.offset - startOffset > record.dataSize) {/* console.log('Invalid object', record, this); */ return;}\n                        changedEntries.push(getProps(buf, startOffset + record.dataSize));\n                    }\n                    this.inventory_items.push({\n                        iref: iref,\n                        stackedItemsNum: stackedItemsNum,\n                        changedEntriesNum: changedEntriesNum,\n                        changedEntries: changedEntries,\n                    });\n                }\n            }\n            if (record.flags & 0x173004e0) {\n                if (buf.offset - startOffset > record.dataSize) {/* console.log('Invalid object', record, this); */ return;}\n                let props = getProps(buf, startOffset + record.dataSize);\n                this.propertiesNum = props.propertiesNum;\n                this.properties = props.properties;\n            }\n            if (record.flags & 0x8 && !(record.flags & 0x2 || record.flags & 0x4)) {\n                this.havokMoved_dataLen = buf.readShort(maxOffset);\n                this.havokMoved_data = buf.readByteArray(this.havokMoved_dataLen, maxOffset);\n            }\n            if (record.flags & 0x10) {\n                this.scale = buf.readFloat(maxOffset);\n            }\n            this.enabled = (record.flags & 0x40000000) === 0x40000000;\n        } catch (e) {\n            console.log(e);\n        }\n        if (buf.buffer.byteLength !== buf.offset) {\n            // Too many issues decoding these still\n            //debugger;\n        }\n    }\n}\n","import Record from \"./record\";\nimport { SaveBuffer } from \"./util\";\n\nexport class RecordQuest {\n    flags?: number;\n    stageNum?: number;\n    stage: {\n        index: number;\n        flag: number;\n        entryNum: number;\n        entries: {\n            entryNum: number;\n            entryValFloat: number;\n            entryValInt: number;\n            entryValByteArray: number[];\n        }[];\n    }[] = [];\n    dataNum?: number;\n    dataUnknown?: number;\n    data: number[][] = [];\n    constructor(record: Record, buf: SaveBuffer) {\n        const startOffset = buf.offset;\n        if (record.flags & 0x4) {\n            this.flags = buf.readByte();\n        }\n        if (record.flags & 0x10000000) {\n            this.stageNum = buf.readByte();\n            for (let i = 0; i < this.stageNum; ++i) {\n                let index = buf.readByte();\n                let flag = buf.readByte();\n                let entryNum = buf.readByte();\n                let entries: {\n                    entryNum: number;\n                    entryValFloat: number;\n                    entryValInt: number;\n                    entryValByteArray: number[];\n                }[] = [];\n                for (let j = 0; j < entryNum; ++j) {\n                    let entryFlag = buf.readByte();\n                    // Read from a clone of buf for the other two since it's the same data represented 3 ways\n                    let tmp = buf.clone();\n                    let tmp2 = buf.clone();\n\n                    let entryValFloat = buf.readFloat();\n\n                    let entryValInt = tmp.readInt();\n                    let entryValByteArray = tmp2.readByteArray(4);\n\n                    entries.push({\n                        entryNum: entryFlag,\n                        entryValFloat: entryValFloat,\n                        entryValInt: entryValInt,\n                        entryValByteArray: entryValByteArray,\n                    });\n                }\n                this.stage.push({\n                    index: index,\n                    flag: flag,\n                    entryNum: entryNum,\n                    entries: entries,\n                });\n            }\n        }\n        if (record.flags & 0x8000000) {\n            this.dataNum = buf.readShort();\n            this.dataUnknown = buf.readByte();\n            for (let i = 0; i < this.dataNum; ++i) {\n                let l = 12;\n                if (i + 1 === this.dataNum) {\n                    l = (startOffset + record.dataSize) - buf.offset;\n                }\n                this.data.push(buf.readByteArray(l));\n                if (buf.offset > (startOffset + record.dataSize)) {\n                    break;\n                }\n            }\n        }\n        if (buf.buffer.byteLength !== buf.offset) {\n            debugger;\n        }\n    }\n}"],"names":["root","factory","exports","module","define","amd","self","SaveBuffer","constructor","buffer","realOffset","offset","this","advance","num","clone","readDate","endOffset","byteLength","wordBuf","Uint16Array","slice","wYear","wMonth","wDay","wHour","wMinute","wSecond","wMilliseconds","Date","readInt","Uint32Array","readShort","peekShort","readByte","Uint8Array","peekByte","readFloat","Float32Array","readDouble","Float64Array","readbzString","readbString","strLen","readString","len","String","fromCharCode","readByteArray","readShortArray","readIntArray","readFloatArray","readDoubleArray","readbStringArray","ret","i","push","readbzStringArray","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","RecordAI","record","buf","neverRun","flags","RecordBook","teaches","RecordCell","unknown26","seenUnknown","data","pathgridData","startOffset","cellCreated","unknown2","time","seenType","dataSize","dataNum","dataFlags","fullName","owner","pathgridDataLen","RecordCreature","factions","spellIds","aiData","modifiers","strength","intelligence","willpower","agility","speed","endurance","personality","luck","baseMagicka","baseFatigue","barterGold","level","calcMin","calcMax","factionsNum","faction","factionRank","spellCount","baseHealth","modCount","index","mod","valueIndex","modValue","armorer","athletics","blade","block","blunt","handToHand","heavyArmor","alchemy","alteration","conjuration","destruction","illusion","mysticism","restoration","acrobatics","lightArmor","marksman","mercantile","security","sneak","speechcraft","combatStyle","propertiesNum","properties","k","flag","scriptref","varNum","variables","l","_var","varIndex","varType","refVar","unknown","cell","x","y","z","package","package2","formId","iref","lockLevel","rX","rY","rZ","destDoor","door","convTopic","convNum","conv","convQuest","convDialog","convInfo","RecordType","PlayerObject","maxOffset","statistics","skillAdvances","unknown1","largestBounty","killedCreatures","killedPersons","exploredPlaces","lockPicked","picksBroken","capturedSouls","usedIngredients","mixedPotions","oblivionGatesClosed","horsesOwned","housesOwned","investments","booksRead","teachingBooksRead","artifactsFound","hoursSlept","hoursWaited","unknown3","unknown4","jokesTold","disease","nirnrootFound","burglary","pickpocketing","unknown5","attacks","murder","stolenHorses","unknown6","unknown7","pcBirthsign","unknownArray","num2","randODoorsNum","randODoors","activeEffectsNum","activeEffects","size","reference","effectDetails","expPoints","advancement","attrSkillCounts","specCounts","combat","magic","stealth","skillUsage","majorSkillAdv","unknown8","activeQuest","knownTopicsNum","knownTopics","openQuestsNum","openQuests","quest","questStage","logEntry","magEffectNum","magEffects","edid","fgGeoSym","fgGeoAsym","fgTexSym","race","hair","eyes","hairLength","hairColor","unknown9","gender","pcName","pcClass","customClass_favoredAttribute1","customClass_favoredAttribute2","customClass_specialization","customClass_majorSkill1","customClass_majorSkill2","customClass_majorSkill3","customClass_majorSkill4","customClass_majorSkill5","customClass_majorSkill6","customClass_majorSkill7","customClass_flags","customClass_services","customClass_skillTrained","customClass_maxTrainingLevel","customClass_unused","customClass_name","customClass_icon","unknown10","RecordCreatureReference","tempAttributeChanges_activeEffects","tempAttributeChanges_unknownEffects","tempAttributeChanges_damageEffects","inventory_items","havokMoved_data","playerOffset","player","cellChanged_cell","cellChanged_x","cellChanged_y","cellChanged_z","created_flags","created_baseItem","created_cell","created_x","created_y","created_z","created_rX","created_rY","created_rZ","moved_cell","actorFlag","moved_x","moved_y","moved_z","moved_rX","moved_rY","moved_rZ","havokMoved_cell","havokMoved_x","havokMoved_y","havokMoved_z","havokMoved_rX","havokMoved_rY","havokMoved_rZ","oblivionCell","tempAttributeChanges_deltaHealth","tempAttributeChanges_deltaMagicka","tempAttributeChanges_deltaFatigue","inventory_itemNum","stackedItemsNum","changedEntriesNum","changedEntries","j","p","havokMoved_dataLen","scale","enabled","e","console","log","RecordDialog","topicSaidOnce","RecordFaction","reactions","reactionsNum","u1","u2","RecordGeneric","RecordInstanceReference","props","RecordQuest","stage","stageNum","entryNum","entries","entryFlag","tmp","tmp2","entryValFloat","entryValInt","entryValByteArray","dataUnknown","Record","type","version","subRecord","parsedSubRecord","tmpBuffer","ArrayBuffer","tmpView","Book","Faction","AlchemicalApparatus","Armor","Clothing","Ingredient","Light","Miscellaneous","Ammo","SoulGem","Potion","Weapon","Key","NPC","Creature","Cell","InstanceReference","CharacterReference","CreatureReference","Dialog","Quest","AI"],"sourceRoot":""}