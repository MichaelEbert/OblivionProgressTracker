import Record from "./record";
import { InventoryItem } from "./inventoryitem";
import { SaveBuffer } from "./util";
declare class PlayerObject {
    statistics: {
        skillAdvances: number;
        unknown1: number;
        largestBounty: number;
        killedCreatures: number;
        killedPersons: number;
        exploredPlaces: number;
        lockPicked: number;
        picksBroken: number;
        capturedSouls: number;
        usedIngredients: number;
        mixedPotions: number;
        oblivionGatesClosed: number;
        horsesOwned: number;
        housesOwned: number;
        investments: number;
        booksRead: number;
        teachingBooksRead: number;
        artifactsFound: number;
        hoursSlept: number;
        hoursWaited: number;
        unknown2: number;
        unknown3: number;
        unknown4: number;
        jokesTold: number;
        disease: number;
        nirnrootFound: number;
        burglary: number;
        pickpocketing: number;
        unknown5: number;
        attacks: number;
        murder: number;
        stolenHorses: number;
        unknown6: number;
        unknown7: number;
    };
    unknown1?: number;
    unknown2?: number[];
    unknown3?: number[];
    pcBirthsign?: number;
    unknownArray?: number[];
    num2?: number;
    unknown4?: number[];
    unknown5?: number[][];
    unknown6?: number[];
    randODoorsNum?: number;
    randODoors?: {
        door: number;
        flag: number;
    }[];
    unknown7?: number[];
    activeEffectsNum?: number;
    activeEffects?: {
        size: number;
        reference: number;
        index: number;
        effectDetails: number[];
    }[];
    expPoints?: {
        armorer: number;
        athletics: number;
        blade: number;
        block: number;
        blunt: number;
        handToHand: number;
        heavyArmor: number;
        alchemy: number;
        alteration: number;
        conjuration: number;
        destruction: number;
        illusion: number;
        mysticism: number;
        restoration: number;
        acrobatics: number;
        lightArmor: number;
        marksman: number;
        mercantile: number;
        security: number;
        sneak: number;
        speechcraft: number;
    };
    advancement?: number;
    attrSkillCounts?: {
        strength: number;
        intelligence: number;
        willpower: number;
        agility: number;
        speed: number;
        endurance: number;
        personality: number;
        luck: number;
    }[];
    specCounts?: {
        combat: number;
        magic: number;
        stealth: number;
    };
    skillUsage?: {
        armorer: number;
        athletics: number;
        blade: number;
        block: number;
        blunt: number;
        handToHand: number;
        heavyArmor: number;
        alchemy: number;
        alteration: number;
        conjuration: number;
        destruction: number;
        illusion: number;
        mysticism: number;
        restoration: number;
        acrobatics: number;
        lightArmor: number;
        marksman: number;
        mercantile: number;
        security: number;
        sneak: number;
        speechcraft: number;
    };
    majorSkillAdv?: number;
    unknown8?: number;
    activeQuest?: number;
    knownTopicsNum?: number;
    knownTopics?: number[];
    openQuestsNum?: number;
    openQuests?: {
        quest: number;
        questStage: number;
        logEntry: number;
    }[];
    magEffectNum?: number;
    magEffects?: {
        edid: string;
    }[];
    fgGeoSym?: number[];
    fgGeoAsym?: number[];
    fgTexSym?: number[];
    race?: number;
    hair?: number;
    eyes?: number;
    hairLength?: number;
    hairColor?: number[];
    unknown9?: number;
    gender?: number;
    pcName?: string;
    pcClass?: number;
    customClass_favoredAttribute1?: number;
    customClass_favoredAttribute2?: number;
    customClass_specialization?: number;
    customClass_majorSkill1?: number;
    customClass_majorSkill2?: number;
    customClass_majorSkill3?: number;
    customClass_majorSkill4?: number;
    customClass_majorSkill5?: number;
    customClass_majorSkill6?: number;
    customClass_majorSkill7?: number;
    customClass_flags?: number;
    customClass_services?: number;
    customClass_skillTrained?: number;
    customClass_maxTrainingLevel?: number;
    customClass_unused?: number[];
    customClass_name?: string;
    customClass_icon?: string;
    unknown10?: number;
    constructor(buf: SaveBuffer, maxOffset: number);
}
export declare class RecordCreatureReference {
    cellChanged_cell?: number;
    cellChanged_x?: number;
    cellChanged_y?: number;
    cellChanged_z?: number;
    created_flags?: number;
    created_baseItem?: number;
    created_cell?: number;
    created_x?: number;
    created_y?: number;
    created_z?: number;
    created_rX?: number;
    created_rY?: number;
    created_rZ?: number;
    moved_cell?: number;
    moved_x?: number;
    moved_y?: number;
    moved_z?: number;
    moved_rX?: number;
    moved_rY?: number;
    moved_rZ?: number;
    havokMoved_cell?: number;
    havokMoved_x?: number;
    havokMoved_y?: number;
    havokMoved_z?: number;
    havokMoved_rX?: number;
    havokMoved_rY?: number;
    havokMoved_rZ?: number;
    oblivionCell?: number;
    tempAttributeChanges_activeEffects: number[];
    tempAttributeChanges_unknownEffects: number[];
    tempAttributeChanges_damageEffects: number[];
    tempAttributeChanges_deltaHealth?: number;
    tempAttributeChanges_deltaMagicka?: number;
    tempAttributeChanges_deltaFatigue?: number;
    actorFlag?: number;
    flags?: number;
    inventory_itemNum?: number;
    inventory_items: InventoryItem[];
    havokMoved_dataLen?: number;
    havokMoved_data: number[];
    scale?: number;
    enabled?: boolean;
    propertiesNum?: number;
    properties: {
        flag: number;
        value: any;
    }[];
    player?: PlayerObject;
    constructor(record: Record, buf: SaveBuffer);
}
export {};
